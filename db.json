{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"8980bb360bc56cc756cc491b58e8eee691a6e6c5","modified":1471401397832},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1469557558000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1469557558000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1469557558000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1469557558000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1469557558000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1469557558000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1469557558000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1469557558000},{"_id":"themes/next/_config.yml","hash":"a4d250a6802d7f655a8cb0332ff6916c99f8feb5","modified":1471401763214},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1469557558000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1469557558000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1469557558000},{"_id":"source/_posts/Java-四种引用.md","hash":"1a03b424b69487549a29ef373f06a19390be3136","modified":1471400784573},{"_id":"source/_posts/android-AIDL.md","hash":"74a6502bf465a07b12bc9d4d28f30d16826d3fa0","modified":1471402385158},{"_id":"source/_posts/android-Activity与Fragment.md","hash":"efd0268248a4c3303997b5e826656e26917c2a08","modified":1471503086330},{"_id":"source/_posts/android-Animation与Animator.md","hash":"3f6bad4402d80c1d13c556cec21afba33b45d8be","modified":1471403044677},{"_id":"source/_posts/android-Art与Dalvik.md","hash":"ba45bf71ee087f6b321eafc5173cd35571d6bcae","modified":1471402686235},{"_id":"source/_posts/android-Binder.md","hash":"a92ea96b5e940f210e36d644cfc48e34fb835d24","modified":1471402393088},{"_id":"source/_posts/android-BroadCast与StickBroadCast.md","hash":"a4b70aef2177e82c3bcf6d331bd95181b61cf0f2","modified":1471402575603},{"_id":"source/_posts/android-DecorView.md","hash":"26c467ac6fe2c58654aac28e05116f40abcda5a4","modified":1471403019348},{"_id":"source/_posts/android-GestureDector.md","hash":"1445d64be4587b0b5d92097cc8afe737086d2f57","modified":1471402538260},{"_id":"source/_posts/android-MultiDex.md","hash":"0431978212c38c1a63b643b42b79bd546c7e300c","modified":1471399636869},{"_id":"source/_posts/android-NDK.md","hash":"76bfb860f8799ddc387fb5850264147885fd4499","modified":1471399270014},{"_id":"source/_posts/android-Scroller.md","hash":"8954609bccbfd63a5aca6db56486e95180cac79f","modified":1471402987631},{"_id":"source/_posts/android-Service与IntentService.md","hash":"c0f236993cf73bc7754b161f5ead2f8e5d37f52b","modified":1471402552854},{"_id":"source/_posts/android-SurfaceView.md","hash":"095af0bb95f1d612f16990c769e00ff6e0463ece","modified":1471402709090},{"_id":"source/_posts/android-ViewDragHelper.md","hash":"2c0b9bbc0d7bff9b950a0f72f49e17ea011980f5","modified":1471402524875},{"_id":"source/_posts/android-WebView.md","hash":"45bfa7991bd2d4f7443d1f12ef9e49776aaa5738","modified":1471398808865},{"_id":"source/_posts/android-Window.md","hash":"37de7eaa2a3e49f961e4e87e34a7df3768d6bce8","modified":1471402428207},{"_id":"source/_posts/android-handler.md","hash":"35365a9d0cdf64124575f4ae05d6230e1dbb6ae0","modified":1471398690507},{"_id":"source/_posts/android-view-事件分发.md","hash":"81897cce6c4638b875610912ebd785cde16ff712","modified":1471423834470},{"_id":"source/_posts/android-view-自定义view.md","hash":"6375ac27196cdb0d67f2f97e548e0987d2027551","modified":1471400549991},{"_id":"source/_posts/android-安全机制.md","hash":"7ea751e54c0ecea62ef39f1c6a55ff34785b777f","modified":1471403072973},{"_id":"source/_posts/android-常见内存泄漏分析及解决方案.md","hash":"4d68ef62119416dacc32b33328668318c4d47334","modified":1471414025997},{"_id":"source/_posts/android-序列化对单例模式的破坏.md","hash":"8557754c64ffe986bbdac18e48c0a0681a77ca01","modified":1471482944276},{"_id":"source/_posts/android-适配.md","hash":"48c5a76e5b69399f7750e2406adca76185eb308a","modified":1471423568897},{"_id":"source/categories/index.md","hash":"6e2ad4dad1e7277cbf3120707337a294a942267e","modified":1471338763783},{"_id":"source/images/avatar.png","hash":"a0709dde708afcd3f76f6e2f42e24019b97f3226","modified":1471337120205},{"_id":"source/tags/index.md","hash":"3bdd2a2ef067c5c76f1391f8241a1190fc7d9e37","modified":1471337878940},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1469557558000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1469557558000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1469557558000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1469557558000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1469557558000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1469557558000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1469557558000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1469557558000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1469557558000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1469557558000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1469557558000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1469557558000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1469557558000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1469557558000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1469557558000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1469557558000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1469557558000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1469557558000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1469557558000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1469557558000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1469557558000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1469557558000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469557558000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469557558000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469557558000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1469557558000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1469557558000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1469557558000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1469557558000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1469557558000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1469557558000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1469557558000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"71d045803db1d52b60bb6a5ca0fa4ae26238696b","modified":1471339882749},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1469557558000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1469557558000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469557558000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1469557558000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1469557558000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469557558000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469557558000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1469557558000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469557558000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1469557558000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469557558000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469557558000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469557558000},{"_id":"themes/next/source/images/avatar.png","hash":"a0709dde708afcd3f76f6e2f42e24019b97f3226","modified":1471337120205},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469557558000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469557558000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469557558000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469557558000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469557558000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469557558000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469557558000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469557558000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469557558000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469557558000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469557558000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469557558000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469557558000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469557558000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1469557558000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469557558000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469557558000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1469557558000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1469557558000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469557558000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1469557558000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469557558000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1469557558000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469557558000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1469557558000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1469557558000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469557558000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1469557558000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1469557558000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469557558000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469557558000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469557558000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469557558000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469557558000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469557558000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1469557558000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1469557558000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469557558000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1469557558000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469557558000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1469557558000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1469557558000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469557558000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469557558000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469557558000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1469557558000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469557558000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469557558000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1469557558000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1469557558000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469557558000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1469557558000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1469557558000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469557558000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469557558000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469557558000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469557558000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469557558000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1469557558000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469557558000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469557558000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469557558000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469557558000},{"_id":"public/404.html","hash":"c7a460b64faeb5cd6c56002a524790034e31ce7c","modified":1471513084591},{"_id":"public/tags/index.html","hash":"1d6cec6efe3f683f38f1ea0b61dfbccb7ba31281","modified":1471513084788},{"_id":"public/categories/index.html","hash":"d4c3557493ac7236cdba6124f1a0a165edf33256","modified":1471513084605},{"_id":"public/2016/08/17/android-DecorView/index.html","hash":"d25300c06d24bf3a33ef86393c9e1ef99bbc3eb1","modified":1471513084789},{"_id":"public/2016/08/17/android-Scroller/index.html","hash":"ecea318c85b70aeba478705887d454bafaeb1650","modified":1471513084789},{"_id":"public/2016/08/17/android-SurfaceView/index.html","hash":"c4a0c3acf71191a0570904a7f3b14d0fe2dd7922","modified":1471513084789},{"_id":"public/2016/08/17/android-Art与Dalvik/index.html","hash":"e42985a6903a2dfa7fc6bb1201608232c4477fa5","modified":1471513084789},{"_id":"public/2016/08/17/android-Animation与Animator/index.html","hash":"0ae5b25d65a010c0d011507f561967674edd1f01","modified":1471513084790},{"_id":"public/2016/08/17/android-BroadCast与StickBroadCast/index.html","hash":"e2d0c27318ab4163be3e244a0421d1df8f07e9d7","modified":1471513084790},{"_id":"public/2016/08/17/android-Service与IntentService/index.html","hash":"2e5f57fff2c790ac9ba69c2a70237dfb19c2fcb2","modified":1471513084790},{"_id":"public/2016/08/17/android-GestureDector/index.html","hash":"8f63a8fadb2775a825b078ed4d52e53677a74549","modified":1471513084790},{"_id":"public/2016/08/17/android-ViewDragHelper/index.html","hash":"0a86cc95b0a2889c77aa7e77c6439f017e212594","modified":1471513084790},{"_id":"public/2016/08/17/android-Window/index.html","hash":"c940267180f4cac3fbff0b1708280184f77d7b1d","modified":1471513084790},{"_id":"public/2016/08/17/android-Binder/index.html","hash":"cec66ad347398151060cdea3deb43d7837df88f9","modified":1471513084790},{"_id":"public/2016/08/17/android-AIDL/index.html","hash":"4b0fb7b1f0185231b28f58a651a1a92b1f17efa3","modified":1471513084790},{"_id":"public/2016/08/17/android-NDK/index.html","hash":"7bf9a8cc28e99e90efa5243f1d03de4dfc62555a","modified":1471513084790},{"_id":"public/2016/08/17/android-序列化对单例模式的破坏/index.html","hash":"7596de92d10b80cc99778ddb95f28e4e2bbc86b0","modified":1471513084792},{"_id":"public/2016/08/17/android-安全机制/index.html","hash":"0f9d6dda7abda448c8dd4c82a227dfd25f24f72b","modified":1471513084790},{"_id":"public/2016/08/17/android-WebView/index.html","hash":"43a412515d415cdbe70769a4913494b0f9efcb26","modified":1471513084791},{"_id":"public/2016/08/17/android-handler/index.html","hash":"7db2aee62205a3413d5ae355fc20c8b25d259649","modified":1471513084791},{"_id":"public/archives/page/3/index.html","hash":"15fd20c89bb0d82d7a223c72fe8ec65e55b99801","modified":1471513084791},{"_id":"public/archives/2016/page/3/index.html","hash":"c6f30cf29f5b381ad6533faf99a2cbbc7f24888b","modified":1471513084791},{"_id":"public/archives/2016/08/page/3/index.html","hash":"b818f65510986929fe523bf973cdaf97ebde3efd","modified":1471513084791},{"_id":"public/categories/java基础知识/index.html","hash":"0e5fe02d8dd5236ea70864258062f5e480c873e0","modified":1471513084791},{"_id":"public/categories/android/index.html","hash":"52a92a2d2c6a5862b91a48d1eaad3d961473419a","modified":1471513084791},{"_id":"public/tags/Java/index.html","hash":"5c4c7f66cba73a578b6b140683c0d2458ffabd75","modified":1471513084791},{"_id":"public/tags/四种引用/index.html","hash":"7e3fd99ceb612ab961289a0f2c82c6cbb3730708","modified":1471513084791},{"_id":"public/tags/android/index.html","hash":"6cb4e250e7659a491cb2644c866ce794ff39a964","modified":1471513084791},{"_id":"public/tags/multidex/index.html","hash":"10ee82889b81cfe909fcf12ea9cbb54031e8a2b1","modified":1471513084791},{"_id":"public/tags/View绘制原理分析/index.html","hash":"171733f3684bd0a7530430be872222723cddcd4f","modified":1471513084792},{"_id":"public/tags/自定义View/index.html","hash":"fe1fbcdbcfe515129334cf5a698815cf3d05449d","modified":1471513084792},{"_id":"public/tags/屏幕适配/index.html","hash":"b8c53e92f232897cbc15982c15c34d2fe5f365b6","modified":1471513084791},{"_id":"public/tags/限定符/index.html","hash":"49151147d52198be63d850427e35811330579c71","modified":1471513084792},{"_id":"public/2016/08/17/android-Activity与Fragment/index.html","hash":"01dbc38555e1b9610f3f8bd63e156fb7f1920c03","modified":1471423660552},{"_id":"public/2016/08/17/Java-四种引用/index.html","hash":"74ad29bd1cbf9a8bd109f6c4e1fe59778c4cbda3","modified":1471513084792},{"_id":"public/2016/08/17/android-MultiDex/index.html","hash":"c70631920b3b07d1e29d5df9449330d40253b33f","modified":1471513084792},{"_id":"public/2016/08/17/android-适配/index.html","hash":"f1d193e8afc9e6faf1d08de2c99417a8985fb3e0","modified":1471513084792},{"_id":"public/2016/08/17/android-view-自定义view/index.html","hash":"190b8391b8ecd66807ae4747eabc1be8b2f52555","modified":1471513084792},{"_id":"public/archives/index.html","hash":"3ca645ed8bb9d9c76119901845c644ec8e653c10","modified":1471513084793},{"_id":"public/archives/page/2/index.html","hash":"73b8b87a6ef30fb2be098db035f5822fe51e0e6f","modified":1471513084796},{"_id":"public/archives/2016/index.html","hash":"3028b664762fee99048c1d1ba02a097632468ac9","modified":1471513084795},{"_id":"public/archives/2016/page/2/index.html","hash":"07858d1964f6efbba234abbefeadfe9738f0c76e","modified":1471513084796},{"_id":"public/archives/2016/08/index.html","hash":"34d57f0d2dee60a9b9baa28a4d6903190344c1b6","modified":1471513084796},{"_id":"public/archives/2016/08/page/2/index.html","hash":"6ea84729c533e83475cf6bd516a006eaa4bbdfef","modified":1471513084796},{"_id":"public/index.html","hash":"fda723d8f2116b6031bb79ff6ab551375a6a188b","modified":1471513084792},{"_id":"public/page/2/index.html","hash":"72cb29ad84c8aa90adc2c327510e79c43c2174c0","modified":1471513084795},{"_id":"public/page/3/index.html","hash":"63402eb73740cc34c0a07e84b7bdf9e09f2535a4","modified":1471513084796},{"_id":"public/2016/08/17/android-常见内存泄漏分析及解决方案/index.html","hash":"4938ce1827eba4d94a4ccf7c77fbb81085bc9193","modified":1471513084789},{"_id":"public/images/avatar.png","hash":"a0709dde708afcd3f76f6e2f42e24019b97f3226","modified":1471423660573},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471423660573},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471423660573},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471423660573},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471423660573},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471423660573},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471423660573},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471423660573},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471423660574},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471423660574},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471423660574},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471423660574},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471423660574},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471423660574},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471423660574},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471423660574},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471423660574},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471423660574},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471423660575},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471423660575},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471423660575},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471423660575},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471423660575},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471423660575},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471423660575},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471423661622},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471423661628},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471423661631},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471423661667},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471423661667},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471423661667},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471423661667},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471423661667},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471423661667},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471423661667},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1471423661667},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1471423661668},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1471423661668},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1471423661668},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1471423661668},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1471423661668},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471423661668},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471423661668},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1471423661668},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471423661668},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471423661668},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471423661668},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471423661668},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471423661668},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471423661669},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471423661669},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471423661669},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471423661670},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471423661670},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471423661670},{"_id":"public/css/main.css","hash":"b04b9e1de1bba12ec77f6375744d930702c0a61b","modified":1471423661670},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471423661670},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471423661670},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471423661670},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471423661670},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471423661670},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471423661671},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471423661671},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471423661671},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1471423661671},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471423661671},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471423661698},{"_id":"public/tags/Android/index.html","hash":"6d676a9c73fc9ffe3befb9b5c3e470b834faf213","modified":1471513084792},{"_id":"public/2016/08/18/android-Activity与Fragment/index.html","hash":"c39eb0967f6894c6ca7743110d2f06caddf37cfe","modified":1471513084792},{"_id":"public/tags/Activity/index.html","hash":"d765455a74e5c3a87f877fadbf98b09e76f29752","modified":1471513084801},{"_id":"public/tags/Fragment/index.html","hash":"eed2e302cb40209839fa7e1759b7f369f36fe1b1","modified":1471513084801},{"_id":"public/tags/ActivityThread/index.html","hash":"d6c76794b474c7497f6f86507d426a2f04e96a4a","modified":1471513084801},{"_id":"public/tags/序列化与反序列化/index.html","hash":"43a5cb0a5ec4d183051a4421882b3926b7def951","modified":1471513084801},{"_id":"public/tags/单例模式/index.html","hash":"fdf1929b31fda821c9cf8aa58006110af0b5dcb1","modified":1471513084801}],"Category":[{"name":"java基础知识","_id":"cirynnjdh0004qo8fcfaal0wt"},{"name":"android","_id":"cirynnje5000jqo8f4thnqlnz"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2016-08-17T02:45:56.609Z","updated":"2016-08-17T02:36:37.832Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cirynnj9q0000qo8fhq24tpzy","content":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>404 - arao'blog</title>\n    <meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"tags","date":"2016-08-16T08:39:28.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-16 16:39:28\ntype: \"tags\"\ncomments: false   #去除多说评论框\n---\n","updated":"2016-08-16T08:57:58.940Z","path":"tags/index.html","layout":"page","_id":"cirynnjkd0016qo8f18st9ceo","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-08-16T08:42:22.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-16 16:42:22\ntype: \"categories\"\ncomments: false   #去除多说评论框\n---\n","updated":"2016-08-16T09:12:43.783Z","path":"categories/index.html","layout":"page","_id":"cirynnjke0017qo8f09d578un","content":"","excerpt":"","more":""}],"Post":[{"title":"Java-四种引用","date":"2016-08-17T02:00:39.000Z","_content":"# Java的四种引用：强应用，软引用，弱引用，虚引用\n四种引用的不同之处仅在于垃圾回收时GC对他们的处理方式不同。在解说四种引用之前，我们先来看一下引用队列。\n>引用队列：当对象被gc回收之后，就会将该对象的引用加入引用队列。但是既然对象都已经被回收了，那为什么还要把该对象的引用保存起来呢？通常在对象被gc回收之后，都需要进行一些清理工作，比如如果你将对象的引用保存在WeakHashMap中，当对象被回收之后，就需要将引用从WeakHashMap中移除，防止map无休止的增长。\n## 1、 强引用StrongReference\n通常我们直接new出来的对象都是强引用的，例如StringBuffer buffer = new StringBuffer();我们知道在Jvm中对象都是通过引用来访问的，同一个对象可能有多个引用指向它。对于被强应用的对象，只要目前还有一个强应用指向它，那么该对象就无法被gc回收。\n## 2、 软引用SoftReference\n软引用是相对强应用来说相对较“软”的引用，只要内存足够，那么软引用指向的对象就不会被gc回收，但是如果内存不租了，就会被回收。\n## 3、 弱引用WeakReference\n弱引用是相对软应用更“弱”的引用，当gc在扫描jvm中的垃圾时，只要发现了某个对象是被软引用的，不管内存是否充足，该对象都会被回收。\n```\nWeakReference<Activity> activity = new WeakReference<>(widget);\nactivity.get();\n```\n通过get()方法就可以获取到所引用的对象，但是因为弱引用的特性，我们经常会遇到activity.get()返回null的情况，所以\n## 4、 虚引用PhantomReference\n虚引用没有任何“引用”的意思，换句话说就是持有虚引用的对象不持有任何引用，它可能随时被gc回收。，就目前来看虚引用好像形同虚设，没有任何作用，但凡事存在均有理由，之所以设计虚引用是想通过它来跟踪gc回收对象的过程。虚引用与软引用、弱引用的不同之处就是它必须配合引用队列来使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。\n```\nReferenceQueue queue = new ReferenceQueue ();\nPhantomReference pr = new PhantomReference (object, queue); \n```\n# 总结\n根据上面的分析描述可知：\n\n1. 从引用的强弱上依次为：强引用、软应用、弱引用、虚引用\n2. 软引用经常被用来设计高速cache\n3. 虚引用必须配合引用队列来使用\n\n\n----------","source":"_posts/Java-四种引用.md","raw":"---\ntitle: Java-四种引用\ndate: 2016-08-17 10:00:39\ncategories: java基础知识\ntags: [\"Java\", \"四种引用\"]\n---\n# Java的四种引用：强应用，软引用，弱引用，虚引用\n四种引用的不同之处仅在于垃圾回收时GC对他们的处理方式不同。在解说四种引用之前，我们先来看一下引用队列。\n>引用队列：当对象被gc回收之后，就会将该对象的引用加入引用队列。但是既然对象都已经被回收了，那为什么还要把该对象的引用保存起来呢？通常在对象被gc回收之后，都需要进行一些清理工作，比如如果你将对象的引用保存在WeakHashMap中，当对象被回收之后，就需要将引用从WeakHashMap中移除，防止map无休止的增长。\n## 1、 强引用StrongReference\n通常我们直接new出来的对象都是强引用的，例如StringBuffer buffer = new StringBuffer();我们知道在Jvm中对象都是通过引用来访问的，同一个对象可能有多个引用指向它。对于被强应用的对象，只要目前还有一个强应用指向它，那么该对象就无法被gc回收。\n## 2、 软引用SoftReference\n软引用是相对强应用来说相对较“软”的引用，只要内存足够，那么软引用指向的对象就不会被gc回收，但是如果内存不租了，就会被回收。\n## 3、 弱引用WeakReference\n弱引用是相对软应用更“弱”的引用，当gc在扫描jvm中的垃圾时，只要发现了某个对象是被软引用的，不管内存是否充足，该对象都会被回收。\n```\nWeakReference<Activity> activity = new WeakReference<>(widget);\nactivity.get();\n```\n通过get()方法就可以获取到所引用的对象，但是因为弱引用的特性，我们经常会遇到activity.get()返回null的情况，所以\n## 4、 虚引用PhantomReference\n虚引用没有任何“引用”的意思，换句话说就是持有虚引用的对象不持有任何引用，它可能随时被gc回收。，就目前来看虚引用好像形同虚设，没有任何作用，但凡事存在均有理由，之所以设计虚引用是想通过它来跟踪gc回收对象的过程。虚引用与软引用、弱引用的不同之处就是它必须配合引用队列来使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。\n```\nReferenceQueue queue = new ReferenceQueue ();\nPhantomReference pr = new PhantomReference (object, queue); \n```\n# 总结\n根据上面的分析描述可知：\n\n1. 从引用的强弱上依次为：强引用、软应用、弱引用、虚引用\n2. 软引用经常被用来设计高速cache\n3. 虚引用必须配合引用队列来使用\n\n\n----------","slug":"Java-四种引用","published":1,"updated":"2016-08-17T02:26:24.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjbg0001qo8fu28f81ph","content":"<h1 id=\"Java的四种引用：强应用，软引用，弱引用，虚引用\"><a href=\"#Java的四种引用：强应用，软引用，弱引用，虚引用\" class=\"headerlink\" title=\"Java的四种引用：强应用，软引用，弱引用，虚引用\"></a>Java的四种引用：强应用，软引用，弱引用，虚引用</h1><p>四种引用的不同之处仅在于垃圾回收时GC对他们的处理方式不同。在解说四种引用之前，我们先来看一下引用队列。</p>\n<blockquote>\n<p>引用队列：当对象被gc回收之后，就会将该对象的引用加入引用队列。但是既然对象都已经被回收了，那为什么还要把该对象的引用保存起来呢？通常在对象被gc回收之后，都需要进行一些清理工作，比如如果你将对象的引用保存在WeakHashMap中，当对象被回收之后，就需要将引用从WeakHashMap中移除，防止map无休止的增长。</p>\n<h2 id=\"1、-强引用StrongReference\"><a href=\"#1、-强引用StrongReference\" class=\"headerlink\" title=\"1、 强引用StrongReference\"></a>1、 强引用StrongReference</h2><p>通常我们直接new出来的对象都是强引用的，例如StringBuffer buffer = new StringBuffer();我们知道在Jvm中对象都是通过引用来访问的，同一个对象可能有多个引用指向它。对于被强应用的对象，只要目前还有一个强应用指向它，那么该对象就无法被gc回收。</p>\n<h2 id=\"2、-软引用SoftReference\"><a href=\"#2、-软引用SoftReference\" class=\"headerlink\" title=\"2、 软引用SoftReference\"></a>2、 软引用SoftReference</h2><p>软引用是相对强应用来说相对较“软”的引用，只要内存足够，那么软引用指向的对象就不会被gc回收，但是如果内存不租了，就会被回收。</p>\n<h2 id=\"3、-弱引用WeakReference\"><a href=\"#3、-弱引用WeakReference\" class=\"headerlink\" title=\"3、 弱引用WeakReference\"></a>3、 弱引用WeakReference</h2><p>弱引用是相对软应用更“弱”的引用，当gc在扫描jvm中的垃圾时，只要发现了某个对象是被软引用的，不管内存是否充足，该对象都会被回收。\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">WeakReference</span>&lt;<span class=\"type\">Activity</span>&gt; activity = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">WeakReference</span>&lt;&gt;(widget);</span></div><div class=\"line\"><span class=\"title\">activity</span>.<span class=\"title\">get</span>();</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>通过get()方法就可以获取到所引用的对象，但是因为弱引用的特性，我们经常会遇到activity.get()返回null的情况，所以</p>\n<h2 id=\"4、-虚引用PhantomReference\"><a href=\"#4、-虚引用PhantomReference\" class=\"headerlink\" title=\"4、 虚引用PhantomReference\"></a>4、 虚引用PhantomReference</h2><p>虚引用没有任何“引用”的意思，换句话说就是持有虚引用的对象不持有任何引用，它可能随时被gc回收。，就目前来看虚引用好像形同虚设，没有任何作用，但凡事存在均有理由，之所以设计虚引用是想通过它来跟踪gc回收对象的过程。虚引用与软引用、弱引用的不同之处就是它必须配合引用队列来使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReferenceQueue <span class=\"built_in\">queue</span> = <span class=\"keyword\">new</span> ReferenceQueue ();</div><div class=\"line\">PhantomReference pr = <span class=\"keyword\">new</span> PhantomReference (object, <span class=\"built_in\">queue</span>);</div></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>根据上面的分析描述可知：</p>\n<ol>\n<li>从引用的强弱上依次为：强引用、软应用、弱引用、虚引用</li>\n<li>软引用经常被用来设计高速cache</li>\n<li>虚引用必须配合引用队列来使用</li>\n</ol>\n<hr>\n","excerpt":"","more":"<h1 id=\"Java的四种引用：强应用，软引用，弱引用，虚引用\"><a href=\"#Java的四种引用：强应用，软引用，弱引用，虚引用\" class=\"headerlink\" title=\"Java的四种引用：强应用，软引用，弱引用，虚引用\"></a>Java的四种引用：强应用，软引用，弱引用，虚引用</h1><p>四种引用的不同之处仅在于垃圾回收时GC对他们的处理方式不同。在解说四种引用之前，我们先来看一下引用队列。</p>\n<blockquote>\n<p>引用队列：当对象被gc回收之后，就会将该对象的引用加入引用队列。但是既然对象都已经被回收了，那为什么还要把该对象的引用保存起来呢？通常在对象被gc回收之后，都需要进行一些清理工作，比如如果你将对象的引用保存在WeakHashMap中，当对象被回收之后，就需要将引用从WeakHashMap中移除，防止map无休止的增长。</p>\n<h2 id=\"1、-强引用StrongReference\"><a href=\"#1、-强引用StrongReference\" class=\"headerlink\" title=\"1、 强引用StrongReference\"></a>1、 强引用StrongReference</h2><p>通常我们直接new出来的对象都是强引用的，例如StringBuffer buffer = new StringBuffer();我们知道在Jvm中对象都是通过引用来访问的，同一个对象可能有多个引用指向它。对于被强应用的对象，只要目前还有一个强应用指向它，那么该对象就无法被gc回收。</p>\n<h2 id=\"2、-软引用SoftReference\"><a href=\"#2、-软引用SoftReference\" class=\"headerlink\" title=\"2、 软引用SoftReference\"></a>2、 软引用SoftReference</h2><p>软引用是相对强应用来说相对较“软”的引用，只要内存足够，那么软引用指向的对象就不会被gc回收，但是如果内存不租了，就会被回收。</p>\n<h2 id=\"3、-弱引用WeakReference\"><a href=\"#3、-弱引用WeakReference\" class=\"headerlink\" title=\"3、 弱引用WeakReference\"></a>3、 弱引用WeakReference</h2><p>弱引用是相对软应用更“弱”的引用，当gc在扫描jvm中的垃圾时，只要发现了某个对象是被软引用的，不管内存是否充足，该对象都会被回收。\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">WeakReference</span>&lt;<span class=\"type\">Activity</span>&gt; activity = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">WeakReference</span>&lt;&gt;(widget);</div><div class=\"line\"><span class=\"title\">activity</span>.<span class=\"title\">get</span>();</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>通过get()方法就可以获取到所引用的对象，但是因为弱引用的特性，我们经常会遇到activity.get()返回null的情况，所以</p>\n<h2 id=\"4、-虚引用PhantomReference\"><a href=\"#4、-虚引用PhantomReference\" class=\"headerlink\" title=\"4、 虚引用PhantomReference\"></a>4、 虚引用PhantomReference</h2><p>虚引用没有任何“引用”的意思，换句话说就是持有虚引用的对象不持有任何引用，它可能随时被gc回收。，就目前来看虚引用好像形同虚设，没有任何作用，但凡事存在均有理由，之所以设计虚引用是想通过它来跟踪gc回收对象的过程。虚引用与软引用、弱引用的不同之处就是它必须配合引用队列来使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReferenceQueue <span class=\"built_in\">queue</span> = <span class=\"keyword\">new</span> ReferenceQueue ();</div><div class=\"line\">PhantomReference pr = <span class=\"keyword\">new</span> PhantomReference (object, <span class=\"built_in\">queue</span>);</div></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>根据上面的分析描述可知：</p>\n<ol>\n<li>从引用的强弱上依次为：强引用、软应用、弱引用、虚引用</li>\n<li>软引用经常被用来设计高速cache</li>\n<li>虚引用必须配合引用队列来使用</li>\n</ol>\n<hr>\n"},{"title":"android-AIDL","date":"2016-08-17T02:53:05.000Z","_content":"","source":"_posts/android-AIDL.md","raw":"---\ntitle: android-AIDL\ndate: 2016-08-17 10:53:05\ncategories:\ntags:\n---\n","slug":"android-AIDL","published":1,"updated":"2016-08-17T02:53:05.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjd90002qo8feizws0r6","content":"","excerpt":"","more":""},{"title":"android-Activity与Fragment","date":"2016-08-18T02:54:04.000Z","_content":"\n# Activity的启动模式（android:launchMode）\n1. standard 标准模式\n\t>系统默认模式，每次启动ACtivity，不管该Activity的实例是否存在，都会创建一个新的实例。**该Activity与启动它的Activity属于同一个任务栈**。\n\t>\n\t>注意：applicationContext不可启动standard模式的Activity。因为非Activity的context类型没有任务栈，那么如果要启动该模式的Activity，那该Activity无法进入任务栈，那么该Activity就不属于任何任务栈。\n\t\n2. singleTop\n\t>栈顶复用模式。如果将要启动的Activity**处于任务栈的顶部**，那么该Activity会直接复用栈顶的实例。因为该Activity的实例已经存在，那么便不会执行onCreate和onStart，但会调用**onNewIntent**方法。在**onNewIntent**中可以取出这次请求的信息。但是如果该Activity不在任务栈的顶部，则会新建该Activity的实例。\n\n3. singleTask\n\t>栈内复用模式。如果即将启动的Activity在某个任务栈中存在，则直接复用该Activity实例。再次过程中，只会执行**onNewIntnent**。具体而言，当存在该Activity所需要的任务栈，那么在该任务栈中查找该Activity的实例，如果查找到则直接复用，否则新建该Activity的实例并入栈。如果不存在该Activity的任务栈，则新建一个任务栈，然后新建Activity实例，并入栈。\n\t\n\t**注意：**当栈内复用时，那么将会把栈内该Activity之上的所有实例出栈。 \n4. singleInstance\n\t>栈内单例模式。如果某个Activity为该模式，那么该Activity只能单独的存在于某一个任务栈中，其他特征与singleTask相同。\n\t\n**注意：** 上述任务栈是由taskAffinity属性来判定的，默认情况下所有的Activity的taskAffinity属性都是应用包名。如果想指定某个Activity所在的任务栈，修改该属性即可。该属性仅仅在于singleTask或allowTaskReparenting配合使用时才有意义。\n\n附：FLAF vs android:launchMode\n\nFLAG_ACTIVITY_NEW_TASK:singleTask\n\nFLAG_ACTIVITY_CLEAR_TOP: 如果该Activity在当前任务栈中存在实体，那么销毁栈中在其之上的Activity实例，然后创建一个新的实例添加到栈顶。\n\nFLAG_ACTIVITY_SINGLE_TOP: singleTop\n\n总结：使用FLAG则不支持singleInstance，使用android：launchMode则不支持CLEAR_TOP\n\n# Task字段说明\n1. Android:allowTaskReparenting\n\t> 该属性用来标记当Activity退居后台之后，是否能从启动它的Activity所在的任务栈移动到与它有相同taskAffinity的任务栈。eg：在应用中页面A启动了浏览器，那么此时打开的浏览器页面B与A是属于同一个任务栈的，当B退居后台之后，B就会移动到浏览器所在的任务栈中，并且处于该栈的顶部，所以当再次打开浏览器的时候，显示的是页面B。\n\t\n2. android:allowRetainTaskState\n\t>该属性用来标记是否能够保持原有的状态，但是该属性仅仅只对根Activity起作用（所谓根Activity一般指app的主页面）。\n3. android:clearTaskOnLaunch\n\t>如果该属性为true，那么当启动该Activity时，便会清除该Activity所在任务栈的其他所有Activity。\n4. android:finishOnTaskLaunch\n\t>如果设置该属性为true，那么点击home键回到屏幕之后，再次点击应用图标进入引用之后，系统自动销毁该Activity。\n5. android:alwaysRetainTaskState\n\t>如果当前任务栈的根Activity的该属性设置为true，在该任务栈stop之后仍然保持该任务栈中所有Activity的状态。\n\n\n# 系统配置变化导致的Activity变化\n\n## 1. Device Configurations\n>Orientation, Keyboard, Language.\n## 2. 原理简介及解决方案\n>一般情况下，当Device Configuration 在Application运行时发生变化，那么系统会自动重启该Activity（此时先onSaveInstance保存数据，然后执行onDestroy,最后执行onCreate）。\n\n>所以我们必须在Activity销毁之前使用onSaveInsance保存数据，在onCreate或者onRestoreInsanceState中回复数据，以此来提供良好的用户体验。但是有时，**我们需要保存大量的数据**，遇到这种情况一般有两种解决方案：<br>\n\n\n### a. 引用对象\n\n>由于在回调onSaveInstanceState保存的数据不适合保存大批量的数据对象（例如bitmap），而且保存的数据对象必须是Serialized的。这种情况下，当系统配置发送变化时，我们通过引用Fragment来保存数据，在fragment中保存数据对象。具体实现如下：\n\t\n\t//注意：当保存数据时，千万不要保存任何引用Activity实例的对象，否则会造成内存泄漏\n\t\n\n```\n\n\tpublic class RetainedFragment extends Fragment {\n\t\n\t    // data object we want to retain\n\t    private MyDataObject data;\n\t\n\t    // this method is only called once for this fragment\n\t    @Override\n\t    public void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        // retain this fragment\n\t        setRetainInstance(true);**重点内容**\n\t    }\n\t\n\t    public void setData(MyDataObject data) {\n\t        this.data = data;\n\t    }\n\t\n\t    public MyDataObject getData() {\n\t        return data;\n\t    }\n\t}\n```\n\t\n然后使用FragmentManager将fragment添加到Activity中。\n\n\t\n```\n\npublic class MyActivity extends Activity {\n\t\n\t    private RetainedFragment dataFragment;\n\t\n\t    @Override\n\t    public void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.main);\n\t\n\t        // find the retained fragment on activity restarts\n\t        FragmentManager fm = getFragmentManager();\n\t        dataFragment = (DataFragment) fm.findFragmentByTag(“data”);\n\t\n\t        // create the fragment and data the first time\n\t        if (dataFragment == null) {\n\t            // add the fragment\n\t            dataFragment = new DataFragment();\n\t            fm.beginTransaction().add(dataFragment, “data”).commit();\n\t            // load the data from the web\n\t            dataFragment.setData(loadMyData());\n\t        }\n\t\n\t        // the data is available in dataFragment.getData()\n\t        ...\n\t    }\n\t\n\t    @Override\n\t    public void onDestroy() {\n\t        super.onDestroy();\n\t        // store the data in the fragment\n\t        dataFragment.setData(collectMyLoadedData());\n\t    }\n\t}\n```\n\n\n### b. 自己处理系统配置变化引起的改变\n\n 当系统配置发生变化时，如果Activity不需要更新数据或自动应用资源，那么可以声明自己处理该配置变化。\n\n 首先,在AndroidManifest中作如下声明：\n\n\t\n```\n\n\t<activity android:name=\".MyActivity\"\n\t\t\t  <-- 在此处定义自己要处理的变化-->\n\t          android:configChanges=\"orientation|keyboardHidden\"\n\t          android:label=\"@string/app_name\">\n\t          \n```\n\n当在xml中声明的任意配置发生变化时，**系统不会自动重启该Activity**，此时系统将回调onConfigurationChanged()。\n\n> ***注意：*** 当App的targetSdkVersion大于等于13，如果您想处理屏幕方向切换配置变化，那么你必须在android:configuration中包含screenSize属性。\n\n\n# Activity的各个方法及调用时机\n\n\n# Fragment的各个方法及调用时机\n\n# FragmentManager\n\n# FragmentPagerAdapter vs FragmentStatePagerAdapter\n相信大家都使用过viewPager+PagerAdapter的方法来进行页面切换，其中PageAdapter提供page，viewPager显示page。当page的内容发生变化时，PagerAdapter将此变化通知给ViewPager，也就是说PagerAdapter负责创建Page、管理page，ViewPager负责显示page。但是因为各种各样的需求，要求PagerAdapter提供对page不同的管理方式，比如当page较少时，从page1切换到page2,再切换到page3时，要求不得将page1~page2销毁，这样当用户返回page1时，page1的内容会立马展示给用户；当page较多时，考虑到android系统对单一应用内存的限制，就不可能将所有的page保存起来，接下来我们详细了解一下系统为我们提供的各种PagerAdapter。\n## PagerAdapter\n该类是page最简单的管理类，如果继承自该类，至少需要实现 instantiateItem(), destroyItem(), getCount() 以及 isViewFromObject()。\n\n>* getItemPosition()\n\t* 该函数用以返回给定对象的位置，给定对象是由 instantiateItem() 的返回值\t\n在 ViewPager.dataSetChanged() 中将对该函数的返回值进行判断，以决定是否最终触发 PagerAdapter.instantiateItem() 函数。\n在 PagerAdapter 中的实现是直接传回 POSITION_UNCHANGED。如果该函数不被重载，则会一直返回 POSITION_UNCHANGED，从而导致 ViewPager.dataSetChanged() 被调用时，认为不必触发 PagerAdapter.instantiateItem()。很多人因为没有重载该函数，而导致调用\nPagerAdapter.notifyDataSetChanged() 后，什么都没有发生。\n>* public Object instantiateItem(View container, int position)\n\t* 在每次 ViewPager 需要一个用以显示的 Object 的时候，该函数都会被 ViewPager.addNewItem() 调用。\n>* public void notifyDataSetChanged() \n\t* 在数据集发生变化的时候，一般 Activity 会调用 PagerAdapter.notifyDataSetChanged()，以通知 PagerAdapter，而 PagerAdapter 则会通知在自己这里注册过的所有 DataSetObserver。其中之一就是在 ViewPager.setAdapter() 中注册过的 PageObserver。PageObserver 则进而调用 ViewPager.dataSetChanged()，从而导致 ViewPager 开始触发更新其内含 View 的操作。\n\n```\n\n## FragmentPagerAdapter\nFragmentPagerAdapter 继承自 PagerAdapter。相比通用的 PagerAdapter，该类更专注于每一页均为 Fragment 的情况。如文档所述，该类内的每一个生成的 Fragment 都将保存在内存之中，因此适用于那些相对静态的页，数量也比较少的那种；如果需要处理有很多页，并且数据动态性较大、占用内存较多的情况，应该使用FragmentStatePagerAdapter。FragmentPagerAdapter 重载实现了几个必须的函数，因此来自 PagerAdapter 的函数，我们只需要实现 getCount()，即可。且，由于 FragmentPagerAdapter.instantiateItem() 的实现中，调用了一个新增的虚函数 getItem()，因此，我们还至少需要实现一个 getItem()。因此，总体上来说，相对于继承自 PagerAdapter，更方便一些。\n\n>* getItem()\n\t* 该类中新增的一个虚函数。函数的目的为生成新的 Fragment 对象。重载该函数时需要注意这一点。在需要时，该函数将被 instantiateItem() 所调用。如果需要向 Fragment 对象传递相对静态的数据时，我们一般通过 Fragment.setArguments() 来进行，这部分代码应当放到 getItem()。它们只会在新生成 Fragment 对象时执行一遍。如果需要在生成 Fragment 对象后，将数据集里面一些动态的数据传递给该 Fragment，那么，这部分代码不适合放到 getItem() 中。因为当数据集发生变化时，往往对应的 Fragment 已经生成，如果传递数据部分代码放到了 getItem() 中，这部分代码将不会被调用。这也是为什么很多人发现调用 PagerAdapter.notifyDataSetChanged() 后，getItem() 没有被调用的一个原因。\n>* instantiateItem()\n\t* 函数中判断一下要生成的 Fragment 是否已经生成过了，如果生成过了，就使用旧的，旧的将被 Fragment.attach()；如果没有，就调用 getItem() 生成一个新的，新的对象将被 FragmentTransation.add()。\nFragmentPagerAdapter 会将所有生成的 Fragment 对象通过 FragmentManager 保存起来备用，以后需要该 Fragment 时，都会从 FragmentManager 读取，而不会再次调用 getItem() 方法。\n如果需要在生成 Fragment 对象后，将数据集中的一些数据传递给该 Fragment，这部分代码应该放到这个函数的重载里。在我们继承的子类中，重载该函数，并调用 FragmentPagerAdapter.instantiateItem() 取得该函数返回 Fragment 对象，然后，我们该 Fragment 对象中对应的方法，将数据传递过去，然后返回该对象。\n否则，如果将这部分传递数据的代码放到 getItem()中，在 PagerAdapter.notifyDataSetChanged() 后，这部分数据设置代码将不会被调用。\ndestroyItem()\n该函数被调用后，会对 Fragment 进行 FragmentTransaction.detach()。这里不是 remove()，只是 detach()，因此 Fragment 还在 FragmentManager 管理中，Fragment 所占用的资源不会被释放。\n\n## FragmentStatePagerAdapter\nFragmentStatePagerAdapter 和前面的 FragmentPagerAdapter 一样，是继承子 PagerAdapter。但是，和 FragmentPagerAdapter 不一样的是，正如其类名中的 'State' 所表明的含义一样，该 PagerAdapter 的实现将只保留当前页面，当页面离开视线后，就会被消除，释放其资源；而在页面需要显示时，生成新的页面(就像 ListView 的实现一样)。这么实现的好处就是当拥有大量的页面时，不必在内存中占用大量的内存。\n\n>* getItem()\n\t* 一个该类中新增的虚函数。函数的目的为生成新的 Fragment 对象。Fragment.setArguments() 这种只会在新建 Fragment 时执行一次的参数传递代码，可以放在这里。由于 FragmentStatePagerAdapter.instantiateItem() 在大多数情况下，都将调用 getItem() 来生成新的对象，因此如果在该函数中放置与数据集相关的 setter 代码，基本上都可以在 instantiateItem() 被调用时执行，但这和设计意图不符。毕竟还有部分可能是不会调用 getItem() 的。因此这部分代码应该放到 instantiateItem() 中。\n>* instantiateItem()\n\t* 除非碰到 FragmentManager 刚好从 SavedState 中恢复了对应的 Fragment 的情况外，该函数将会调用 getItem() 函数，生成新的 Fragment 对象。新的对象将被 FragmentTransaction.add()。FragmentStatePagerAdapter 就是通过这种方式，每次都创建一个新的 Fragment，而在不用后就立刻释放其资源，来达到节省内存占用的目的的。\n>* destroyItem()\n\t* 将 Fragment 移除，即调用 FragmentTransaction.remove()，并释放其资源。\n\n\n# Activity, ViewPager, Fragment实现懒加载\n\n# Activity启动与加载过程\n  当用户启动Activity时，Instrumentation会接收该请求，然后instrumentation利用Binder向ActivityManagerService发请求。ActivityManagerService内部维护者Activity的调用堆栈（ActivityStack）及各个Activity的状态同步，ActivityManagerService通过ActivityThread去管理Activity的状态从而完成Activity的生命周期的管理。\n","source":"_posts/android-Activity与Fragment.md","raw":"---\ntitle: android-Activity与Fragment\ndate: 2016-08-18 10:54:04\ncategories: android\ntags: [\"android\", \"Activity\", \"Fragment\", \"ActivityThread\"]\n---\n\n# Activity的启动模式（android:launchMode）\n1. standard 标准模式\n\t>系统默认模式，每次启动ACtivity，不管该Activity的实例是否存在，都会创建一个新的实例。**该Activity与启动它的Activity属于同一个任务栈**。\n\t>\n\t>注意：applicationContext不可启动standard模式的Activity。因为非Activity的context类型没有任务栈，那么如果要启动该模式的Activity，那该Activity无法进入任务栈，那么该Activity就不属于任何任务栈。\n\t\n2. singleTop\n\t>栈顶复用模式。如果将要启动的Activity**处于任务栈的顶部**，那么该Activity会直接复用栈顶的实例。因为该Activity的实例已经存在，那么便不会执行onCreate和onStart，但会调用**onNewIntent**方法。在**onNewIntent**中可以取出这次请求的信息。但是如果该Activity不在任务栈的顶部，则会新建该Activity的实例。\n\n3. singleTask\n\t>栈内复用模式。如果即将启动的Activity在某个任务栈中存在，则直接复用该Activity实例。再次过程中，只会执行**onNewIntnent**。具体而言，当存在该Activity所需要的任务栈，那么在该任务栈中查找该Activity的实例，如果查找到则直接复用，否则新建该Activity的实例并入栈。如果不存在该Activity的任务栈，则新建一个任务栈，然后新建Activity实例，并入栈。\n\t\n\t**注意：**当栈内复用时，那么将会把栈内该Activity之上的所有实例出栈。 \n4. singleInstance\n\t>栈内单例模式。如果某个Activity为该模式，那么该Activity只能单独的存在于某一个任务栈中，其他特征与singleTask相同。\n\t\n**注意：** 上述任务栈是由taskAffinity属性来判定的，默认情况下所有的Activity的taskAffinity属性都是应用包名。如果想指定某个Activity所在的任务栈，修改该属性即可。该属性仅仅在于singleTask或allowTaskReparenting配合使用时才有意义。\n\n附：FLAF vs android:launchMode\n\nFLAG_ACTIVITY_NEW_TASK:singleTask\n\nFLAG_ACTIVITY_CLEAR_TOP: 如果该Activity在当前任务栈中存在实体，那么销毁栈中在其之上的Activity实例，然后创建一个新的实例添加到栈顶。\n\nFLAG_ACTIVITY_SINGLE_TOP: singleTop\n\n总结：使用FLAG则不支持singleInstance，使用android：launchMode则不支持CLEAR_TOP\n\n# Task字段说明\n1. Android:allowTaskReparenting\n\t> 该属性用来标记当Activity退居后台之后，是否能从启动它的Activity所在的任务栈移动到与它有相同taskAffinity的任务栈。eg：在应用中页面A启动了浏览器，那么此时打开的浏览器页面B与A是属于同一个任务栈的，当B退居后台之后，B就会移动到浏览器所在的任务栈中，并且处于该栈的顶部，所以当再次打开浏览器的时候，显示的是页面B。\n\t\n2. android:allowRetainTaskState\n\t>该属性用来标记是否能够保持原有的状态，但是该属性仅仅只对根Activity起作用（所谓根Activity一般指app的主页面）。\n3. android:clearTaskOnLaunch\n\t>如果该属性为true，那么当启动该Activity时，便会清除该Activity所在任务栈的其他所有Activity。\n4. android:finishOnTaskLaunch\n\t>如果设置该属性为true，那么点击home键回到屏幕之后，再次点击应用图标进入引用之后，系统自动销毁该Activity。\n5. android:alwaysRetainTaskState\n\t>如果当前任务栈的根Activity的该属性设置为true，在该任务栈stop之后仍然保持该任务栈中所有Activity的状态。\n\n\n# 系统配置变化导致的Activity变化\n\n## 1. Device Configurations\n>Orientation, Keyboard, Language.\n## 2. 原理简介及解决方案\n>一般情况下，当Device Configuration 在Application运行时发生变化，那么系统会自动重启该Activity（此时先onSaveInstance保存数据，然后执行onDestroy,最后执行onCreate）。\n\n>所以我们必须在Activity销毁之前使用onSaveInsance保存数据，在onCreate或者onRestoreInsanceState中回复数据，以此来提供良好的用户体验。但是有时，**我们需要保存大量的数据**，遇到这种情况一般有两种解决方案：<br>\n\n\n### a. 引用对象\n\n>由于在回调onSaveInstanceState保存的数据不适合保存大批量的数据对象（例如bitmap），而且保存的数据对象必须是Serialized的。这种情况下，当系统配置发送变化时，我们通过引用Fragment来保存数据，在fragment中保存数据对象。具体实现如下：\n\t\n\t//注意：当保存数据时，千万不要保存任何引用Activity实例的对象，否则会造成内存泄漏\n\t\n\n```\n\n\tpublic class RetainedFragment extends Fragment {\n\t\n\t    // data object we want to retain\n\t    private MyDataObject data;\n\t\n\t    // this method is only called once for this fragment\n\t    @Override\n\t    public void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        // retain this fragment\n\t        setRetainInstance(true);**重点内容**\n\t    }\n\t\n\t    public void setData(MyDataObject data) {\n\t        this.data = data;\n\t    }\n\t\n\t    public MyDataObject getData() {\n\t        return data;\n\t    }\n\t}\n```\n\t\n然后使用FragmentManager将fragment添加到Activity中。\n\n\t\n```\n\npublic class MyActivity extends Activity {\n\t\n\t    private RetainedFragment dataFragment;\n\t\n\t    @Override\n\t    public void onCreate(Bundle savedInstanceState) {\n\t        super.onCreate(savedInstanceState);\n\t        setContentView(R.layout.main);\n\t\n\t        // find the retained fragment on activity restarts\n\t        FragmentManager fm = getFragmentManager();\n\t        dataFragment = (DataFragment) fm.findFragmentByTag(“data”);\n\t\n\t        // create the fragment and data the first time\n\t        if (dataFragment == null) {\n\t            // add the fragment\n\t            dataFragment = new DataFragment();\n\t            fm.beginTransaction().add(dataFragment, “data”).commit();\n\t            // load the data from the web\n\t            dataFragment.setData(loadMyData());\n\t        }\n\t\n\t        // the data is available in dataFragment.getData()\n\t        ...\n\t    }\n\t\n\t    @Override\n\t    public void onDestroy() {\n\t        super.onDestroy();\n\t        // store the data in the fragment\n\t        dataFragment.setData(collectMyLoadedData());\n\t    }\n\t}\n```\n\n\n### b. 自己处理系统配置变化引起的改变\n\n 当系统配置发生变化时，如果Activity不需要更新数据或自动应用资源，那么可以声明自己处理该配置变化。\n\n 首先,在AndroidManifest中作如下声明：\n\n\t\n```\n\n\t<activity android:name=\".MyActivity\"\n\t\t\t  <-- 在此处定义自己要处理的变化-->\n\t          android:configChanges=\"orientation|keyboardHidden\"\n\t          android:label=\"@string/app_name\">\n\t          \n```\n\n当在xml中声明的任意配置发生变化时，**系统不会自动重启该Activity**，此时系统将回调onConfigurationChanged()。\n\n> ***注意：*** 当App的targetSdkVersion大于等于13，如果您想处理屏幕方向切换配置变化，那么你必须在android:configuration中包含screenSize属性。\n\n\n# Activity的各个方法及调用时机\n\n\n# Fragment的各个方法及调用时机\n\n# FragmentManager\n\n# FragmentPagerAdapter vs FragmentStatePagerAdapter\n相信大家都使用过viewPager+PagerAdapter的方法来进行页面切换，其中PageAdapter提供page，viewPager显示page。当page的内容发生变化时，PagerAdapter将此变化通知给ViewPager，也就是说PagerAdapter负责创建Page、管理page，ViewPager负责显示page。但是因为各种各样的需求，要求PagerAdapter提供对page不同的管理方式，比如当page较少时，从page1切换到page2,再切换到page3时，要求不得将page1~page2销毁，这样当用户返回page1时，page1的内容会立马展示给用户；当page较多时，考虑到android系统对单一应用内存的限制，就不可能将所有的page保存起来，接下来我们详细了解一下系统为我们提供的各种PagerAdapter。\n## PagerAdapter\n该类是page最简单的管理类，如果继承自该类，至少需要实现 instantiateItem(), destroyItem(), getCount() 以及 isViewFromObject()。\n\n>* getItemPosition()\n\t* 该函数用以返回给定对象的位置，给定对象是由 instantiateItem() 的返回值\t\n在 ViewPager.dataSetChanged() 中将对该函数的返回值进行判断，以决定是否最终触发 PagerAdapter.instantiateItem() 函数。\n在 PagerAdapter 中的实现是直接传回 POSITION_UNCHANGED。如果该函数不被重载，则会一直返回 POSITION_UNCHANGED，从而导致 ViewPager.dataSetChanged() 被调用时，认为不必触发 PagerAdapter.instantiateItem()。很多人因为没有重载该函数，而导致调用\nPagerAdapter.notifyDataSetChanged() 后，什么都没有发生。\n>* public Object instantiateItem(View container, int position)\n\t* 在每次 ViewPager 需要一个用以显示的 Object 的时候，该函数都会被 ViewPager.addNewItem() 调用。\n>* public void notifyDataSetChanged() \n\t* 在数据集发生变化的时候，一般 Activity 会调用 PagerAdapter.notifyDataSetChanged()，以通知 PagerAdapter，而 PagerAdapter 则会通知在自己这里注册过的所有 DataSetObserver。其中之一就是在 ViewPager.setAdapter() 中注册过的 PageObserver。PageObserver 则进而调用 ViewPager.dataSetChanged()，从而导致 ViewPager 开始触发更新其内含 View 的操作。\n\n```\n\n## FragmentPagerAdapter\nFragmentPagerAdapter 继承自 PagerAdapter。相比通用的 PagerAdapter，该类更专注于每一页均为 Fragment 的情况。如文档所述，该类内的每一个生成的 Fragment 都将保存在内存之中，因此适用于那些相对静态的页，数量也比较少的那种；如果需要处理有很多页，并且数据动态性较大、占用内存较多的情况，应该使用FragmentStatePagerAdapter。FragmentPagerAdapter 重载实现了几个必须的函数，因此来自 PagerAdapter 的函数，我们只需要实现 getCount()，即可。且，由于 FragmentPagerAdapter.instantiateItem() 的实现中，调用了一个新增的虚函数 getItem()，因此，我们还至少需要实现一个 getItem()。因此，总体上来说，相对于继承自 PagerAdapter，更方便一些。\n\n>* getItem()\n\t* 该类中新增的一个虚函数。函数的目的为生成新的 Fragment 对象。重载该函数时需要注意这一点。在需要时，该函数将被 instantiateItem() 所调用。如果需要向 Fragment 对象传递相对静态的数据时，我们一般通过 Fragment.setArguments() 来进行，这部分代码应当放到 getItem()。它们只会在新生成 Fragment 对象时执行一遍。如果需要在生成 Fragment 对象后，将数据集里面一些动态的数据传递给该 Fragment，那么，这部分代码不适合放到 getItem() 中。因为当数据集发生变化时，往往对应的 Fragment 已经生成，如果传递数据部分代码放到了 getItem() 中，这部分代码将不会被调用。这也是为什么很多人发现调用 PagerAdapter.notifyDataSetChanged() 后，getItem() 没有被调用的一个原因。\n>* instantiateItem()\n\t* 函数中判断一下要生成的 Fragment 是否已经生成过了，如果生成过了，就使用旧的，旧的将被 Fragment.attach()；如果没有，就调用 getItem() 生成一个新的，新的对象将被 FragmentTransation.add()。\nFragmentPagerAdapter 会将所有生成的 Fragment 对象通过 FragmentManager 保存起来备用，以后需要该 Fragment 时，都会从 FragmentManager 读取，而不会再次调用 getItem() 方法。\n如果需要在生成 Fragment 对象后，将数据集中的一些数据传递给该 Fragment，这部分代码应该放到这个函数的重载里。在我们继承的子类中，重载该函数，并调用 FragmentPagerAdapter.instantiateItem() 取得该函数返回 Fragment 对象，然后，我们该 Fragment 对象中对应的方法，将数据传递过去，然后返回该对象。\n否则，如果将这部分传递数据的代码放到 getItem()中，在 PagerAdapter.notifyDataSetChanged() 后，这部分数据设置代码将不会被调用。\ndestroyItem()\n该函数被调用后，会对 Fragment 进行 FragmentTransaction.detach()。这里不是 remove()，只是 detach()，因此 Fragment 还在 FragmentManager 管理中，Fragment 所占用的资源不会被释放。\n\n## FragmentStatePagerAdapter\nFragmentStatePagerAdapter 和前面的 FragmentPagerAdapter 一样，是继承子 PagerAdapter。但是，和 FragmentPagerAdapter 不一样的是，正如其类名中的 'State' 所表明的含义一样，该 PagerAdapter 的实现将只保留当前页面，当页面离开视线后，就会被消除，释放其资源；而在页面需要显示时，生成新的页面(就像 ListView 的实现一样)。这么实现的好处就是当拥有大量的页面时，不必在内存中占用大量的内存。\n\n>* getItem()\n\t* 一个该类中新增的虚函数。函数的目的为生成新的 Fragment 对象。Fragment.setArguments() 这种只会在新建 Fragment 时执行一次的参数传递代码，可以放在这里。由于 FragmentStatePagerAdapter.instantiateItem() 在大多数情况下，都将调用 getItem() 来生成新的对象，因此如果在该函数中放置与数据集相关的 setter 代码，基本上都可以在 instantiateItem() 被调用时执行，但这和设计意图不符。毕竟还有部分可能是不会调用 getItem() 的。因此这部分代码应该放到 instantiateItem() 中。\n>* instantiateItem()\n\t* 除非碰到 FragmentManager 刚好从 SavedState 中恢复了对应的 Fragment 的情况外，该函数将会调用 getItem() 函数，生成新的 Fragment 对象。新的对象将被 FragmentTransaction.add()。FragmentStatePagerAdapter 就是通过这种方式，每次都创建一个新的 Fragment，而在不用后就立刻释放其资源，来达到节省内存占用的目的的。\n>* destroyItem()\n\t* 将 Fragment 移除，即调用 FragmentTransaction.remove()，并释放其资源。\n\n\n# Activity, ViewPager, Fragment实现懒加载\n\n# Activity启动与加载过程\n  当用户启动Activity时，Instrumentation会接收该请求，然后instrumentation利用Binder向ActivityManagerService发请求。ActivityManagerService内部维护者Activity的调用堆栈（ActivityStack）及各个Activity的状态同步，ActivityManagerService通过ActivityThread去管理Activity的状态从而完成Activity的生命周期的管理。\n","slug":"android-Activity与Fragment","published":1,"updated":"2016-08-18T06:51:26.330Z","_id":"cirynnjdi0005qo8f5piq5yvr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Activity的启动模式（android-launchMode）\"><a href=\"#Activity的启动模式（android-launchMode）\" class=\"headerlink\" title=\"Activity的启动模式（android:launchMode）\"></a>Activity的启动模式（android:launchMode）</h1><ol>\n<li><p>standard 标准模式</p>\n<blockquote>\n<p>系统默认模式，每次启动ACtivity，不管该Activity的实例是否存在，都会创建一个新的实例。<strong>该Activity与启动它的Activity属于同一个任务栈</strong>。</p>\n<p>注意：applicationContext不可启动standard模式的Activity。因为非Activity的context类型没有任务栈，那么如果要启动该模式的Activity，那该Activity无法进入任务栈，那么该Activity就不属于任何任务栈。</p>\n</blockquote>\n</li>\n<li><p>singleTop</p>\n<blockquote>\n<p>栈顶复用模式。如果将要启动的Activity<strong>处于任务栈的顶部</strong>，那么该Activity会直接复用栈顶的实例。因为该Activity的实例已经存在，那么便不会执行onCreate和onStart，但会调用<strong>onNewIntent</strong>方法。在<strong>onNewIntent</strong>中可以取出这次请求的信息。但是如果该Activity不在任务栈的顶部，则会新建该Activity的实例。</p>\n</blockquote>\n</li>\n<li><p>singleTask</p>\n<blockquote>\n<p>栈内复用模式。如果即将启动的Activity在某个任务栈中存在，则直接复用该Activity实例。再次过程中，只会执行<strong>onNewIntnent</strong>。具体而言，当存在该Activity所需要的任务栈，那么在该任务栈中查找该Activity的实例，如果查找到则直接复用，否则新建该Activity的实例并入栈。如果不存在该Activity的任务栈，则新建一个任务栈，然后新建Activity实例，并入栈。</p>\n</blockquote>\n<p> <strong>注意：</strong>当栈内复用时，那么将会把栈内该Activity之上的所有实例出栈。 </p>\n</li>\n<li>singleInstance<blockquote>\n<p>栈内单例模式。如果某个Activity为该模式，那么该Activity只能单独的存在于某一个任务栈中，其他特征与singleTask相同。</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>注意：</strong> 上述任务栈是由taskAffinity属性来判定的，默认情况下所有的Activity的taskAffinity属性都是应用包名。如果想指定某个Activity所在的任务栈，修改该属性即可。该属性仅仅在于singleTask或allowTaskReparenting配合使用时才有意义。</p>\n<p>附：FLAF vs android:launchMode</p>\n<p>FLAG_ACTIVITY_NEW_TASK:singleTask</p>\n<p>FLAG_ACTIVITY_CLEAR_TOP: 如果该Activity在当前任务栈中存在实体，那么销毁栈中在其之上的Activity实例，然后创建一个新的实例添加到栈顶。</p>\n<p>FLAG_ACTIVITY_SINGLE_TOP: singleTop</p>\n<p>总结：使用FLAG则不支持singleInstance，使用android：launchMode则不支持CLEAR_TOP</p>\n<h1 id=\"Task字段说明\"><a href=\"#Task字段说明\" class=\"headerlink\" title=\"Task字段说明\"></a>Task字段说明</h1><ol>\n<li><p>Android:allowTaskReparenting</p>\n<blockquote>\n<p>该属性用来标记当Activity退居后台之后，是否能从启动它的Activity所在的任务栈移动到与它有相同taskAffinity的任务栈。eg：在应用中页面A启动了浏览器，那么此时打开的浏览器页面B与A是属于同一个任务栈的，当B退居后台之后，B就会移动到浏览器所在的任务栈中，并且处于该栈的顶部，所以当再次打开浏览器的时候，显示的是页面B。</p>\n</blockquote>\n</li>\n<li><p>android:allowRetainTaskState</p>\n<blockquote>\n<p>该属性用来标记是否能够保持原有的状态，但是该属性仅仅只对根Activity起作用（所谓根Activity一般指app的主页面）。</p>\n</blockquote>\n</li>\n<li>android:clearTaskOnLaunch<blockquote>\n<p>如果该属性为true，那么当启动该Activity时，便会清除该Activity所在任务栈的其他所有Activity。</p>\n</blockquote>\n</li>\n<li>android:finishOnTaskLaunch<blockquote>\n<p>如果设置该属性为true，那么点击home键回到屏幕之后，再次点击应用图标进入引用之后，系统自动销毁该Activity。</p>\n</blockquote>\n</li>\n<li>android:alwaysRetainTaskState<blockquote>\n<p>如果当前任务栈的根Activity的该属性设置为true，在该任务栈stop之后仍然保持该任务栈中所有Activity的状态。</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"系统配置变化导致的Activity变化\"><a href=\"#系统配置变化导致的Activity变化\" class=\"headerlink\" title=\"系统配置变化导致的Activity变化\"></a>系统配置变化导致的Activity变化</h1><h2 id=\"1-Device-Configurations\"><a href=\"#1-Device-Configurations\" class=\"headerlink\" title=\"1. Device Configurations\"></a>1. Device Configurations</h2><blockquote>\n<p>Orientation, Keyboard, Language.</p>\n<h2 id=\"2-原理简介及解决方案\"><a href=\"#2-原理简介及解决方案\" class=\"headerlink\" title=\"2. 原理简介及解决方案\"></a>2. 原理简介及解决方案</h2><p>一般情况下，当Device Configuration 在Application运行时发生变化，那么系统会自动重启该Activity（此时先onSaveInstance保存数据，然后执行onDestroy,最后执行onCreate）。</p>\n<p>所以我们必须在Activity销毁之前使用onSaveInsance保存数据，在onCreate或者onRestoreInsanceState中回复数据，以此来提供良好的用户体验。但是有时，<strong>我们需要保存大量的数据</strong>，遇到这种情况一般有两种解决方案：<br></p>\n</blockquote>\n<h3 id=\"a-引用对象\"><a href=\"#a-引用对象\" class=\"headerlink\" title=\"a. 引用对象\"></a>a. 引用对象</h3><blockquote>\n<p>由于在回调onSaveInstanceState保存的数据不适合保存大批量的数据对象（例如bitmap），而且保存的数据对象必须是Serialized的。这种情况下，当系统配置发送变化时，我们通过引用Fragment来保存数据，在fragment中保存数据对象。具体实现如下：</p>\n</blockquote>\n<pre><code>//注意：当保存数据时，千万不要保存任何引用Activity实例的对象，否则会造成内存泄漏\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainedFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// data object we want to retain</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MyDataObject data;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// this method is only called once for this fragment</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        <span class=\"comment\">// retain this fragment</span></div><div class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);**重点内容**</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(MyDataObject data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MyDataObject <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后使用FragmentManager将fragment添加到Activity中。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">public</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">MyActivity</span> <span class=\"selector-tag\">extends</span> <span class=\"selector-tag\">Activity</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t    private RetainedFragment dataFragment;</div><div class=\"line\">\t</div><div class=\"line\">\t    <span class=\"variable\">@Override</span></div><div class=\"line\">\t    public void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">\t        super<span class=\"selector-class\">.onCreate</span>(savedInstanceState);</div><div class=\"line\">\t        setContentView(R<span class=\"selector-class\">.layout</span><span class=\"selector-class\">.main</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t        <span class=\"comment\">// find the retained fragment on activity restarts</span></div><div class=\"line\">\t        FragmentManager fm = getFragmentManager();</div><div class=\"line\">\t        dataFragment = (DataFragment) fm<span class=\"selector-class\">.findFragmentByTag</span>(“data”);</div><div class=\"line\">\t</div><div class=\"line\">\t        <span class=\"comment\">// create the fragment and data the first time</span></div><div class=\"line\">\t        <span class=\"selector-tag\">if</span> (dataFragment == null) &#123;</div><div class=\"line\">\t            <span class=\"comment\">// add the fragment</span></div><div class=\"line\">\t            dataFragment = new DataFragment();</div><div class=\"line\">\t            fm<span class=\"selector-class\">.beginTransaction</span>()<span class=\"selector-class\">.add</span>(dataFragment, “data”)<span class=\"selector-class\">.commit</span>();</div><div class=\"line\">\t            <span class=\"comment\">// load the data from the web</span></div><div class=\"line\">\t            dataFragment<span class=\"selector-class\">.setData</span>(loadMyData());</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t        <span class=\"comment\">// the data is available in dataFragment.getData()</span></div><div class=\"line\">\t        ...</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t    <span class=\"variable\">@Override</span></div><div class=\"line\">\t    public void onDestroy() &#123;</div><div class=\"line\">\t        super<span class=\"selector-class\">.onDestroy</span>();</div><div class=\"line\">\t        <span class=\"comment\">// store the data in the fragment</span></div><div class=\"line\">\t        dataFragment<span class=\"selector-class\">.setData</span>(collectMyLoadedData());</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"b-自己处理系统配置变化引起的改变\"><a href=\"#b-自己处理系统配置变化引起的改变\" class=\"headerlink\" title=\"b. 自己处理系统配置变化引起的改变\"></a>b. 自己处理系统配置变化引起的改变</h3><p> 当系统配置发生变化时，如果Activity不需要更新数据或自动应用资源，那么可以声明自己处理该配置变化。</p>\n<p> 首先,在AndroidManifest中作如下声明：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;activity android:<span class=\"built_in\">name</span>=<span class=\"string\">\".MyActivity\"</span></div><div class=\"line\">\t\t  &lt;<span class=\"comment\">-- 在此处定义自己要处理的变化--&gt;</span></div><div class=\"line\">          android:configChanges=<span class=\"string\">\"orientation|keyboardHidden\"</span></div><div class=\"line\">          android:label=<span class=\"string\">\"@string/app_name\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>当在xml中声明的任意配置发生变化时，<strong>系统不会自动重启该Activity</strong>，此时系统将回调onConfigurationChanged()。</p>\n<blockquote>\n<p><strong><em>注意：</em></strong> 当App的targetSdkVersion大于等于13，如果您想处理屏幕方向切换配置变化，那么你必须在android:configuration中包含screenSize属性。</p>\n</blockquote>\n<h1 id=\"Activity的各个方法及调用时机\"><a href=\"#Activity的各个方法及调用时机\" class=\"headerlink\" title=\"Activity的各个方法及调用时机\"></a>Activity的各个方法及调用时机</h1><h1 id=\"Fragment的各个方法及调用时机\"><a href=\"#Fragment的各个方法及调用时机\" class=\"headerlink\" title=\"Fragment的各个方法及调用时机\"></a>Fragment的各个方法及调用时机</h1><h1 id=\"FragmentManager\"><a href=\"#FragmentManager\" class=\"headerlink\" title=\"FragmentManager\"></a>FragmentManager</h1><h1 id=\"FragmentPagerAdapter-vs-FragmentStatePagerAdapter\"><a href=\"#FragmentPagerAdapter-vs-FragmentStatePagerAdapter\" class=\"headerlink\" title=\"FragmentPagerAdapter vs FragmentStatePagerAdapter\"></a>FragmentPagerAdapter vs FragmentStatePagerAdapter</h1><p>相信大家都使用过viewPager+PagerAdapter的方法来进行页面切换，其中PageAdapter提供page，viewPager显示page。当page的内容发生变化时，PagerAdapter将此变化通知给ViewPager，也就是说PagerAdapter负责创建Page、管理page，ViewPager负责显示page。但是因为各种各样的需求，要求PagerAdapter提供对page不同的管理方式，比如当page较少时，从page1切换到page2,再切换到page3时，要求不得将page1~page2销毁，这样当用户返回page1时，page1的内容会立马展示给用户；当page较多时，考虑到android系统对单一应用内存的限制，就不可能将所有的page保存起来，接下来我们详细了解一下系统为我们提供的各种PagerAdapter。</p>\n<h2 id=\"PagerAdapter\"><a href=\"#PagerAdapter\" class=\"headerlink\" title=\"PagerAdapter\"></a>PagerAdapter</h2><p>该类是page最简单的管理类，如果继承自该类，至少需要实现 instantiateItem(), destroyItem(), getCount() 以及 isViewFromObject()。</p>\n<blockquote>\n<ul>\n<li>getItemPosition()<ul>\n<li>该函数用以返回给定对象的位置，给定对象是由 instantiateItem() 的返回值<br>在 ViewPager.dataSetChanged() 中将对该函数的返回值进行判断，以决定是否最终触发 PagerAdapter.instantiateItem() 函数。\n在 PagerAdapter 中的实现是直接传回 POSITION_UNCHANGED。如果该函数不被重载，则会一直返回 POSITION_UNCHANGED，从而导致 ViewPager.dataSetChanged() 被调用时，认为不必触发 PagerAdapter.instantiateItem()。很多人因为没有重载该函数，而导致调用\nPagerAdapter.notifyDataSetChanged() 后，什么都没有发生。</li>\n</ul>\n</li>\n<li>public Object instantiateItem(View container, int position)<ul>\n<li>在每次 ViewPager 需要一个用以显示的 Object 的时候，该函数都会被 ViewPager.addNewItem() 调用。</li>\n</ul>\n</li>\n<li>public void notifyDataSetChanged() <ul>\n<li>在数据集发生变化的时候，一般 Activity 会调用 PagerAdapter.notifyDataSetChanged()，以通知 PagerAdapter，而 PagerAdapter 则会通知在自己这里注册过的所有 DataSetObserver。其中之一就是在 ViewPager.setAdapter() 中注册过的 PageObserver。PageObserver 则进而调用 ViewPager.dataSetChanged()，从而导致 ViewPager 开始触发更新其内含 View 的操作。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>```</p>\n<h2 id=\"FragmentPagerAdapter\"><a href=\"#FragmentPagerAdapter\" class=\"headerlink\" title=\"FragmentPagerAdapter\"></a>FragmentPagerAdapter</h2><p>FragmentPagerAdapter 继承自 PagerAdapter。相比通用的 PagerAdapter，该类更专注于每一页均为 Fragment 的情况。如文档所述，该类内的每一个生成的 Fragment 都将保存在内存之中，因此适用于那些相对静态的页，数量也比较少的那种；如果需要处理有很多页，并且数据动态性较大、占用内存较多的情况，应该使用FragmentStatePagerAdapter。FragmentPagerAdapter 重载实现了几个必须的函数，因此来自 PagerAdapter 的函数，我们只需要实现 getCount()，即可。且，由于 FragmentPagerAdapter.instantiateItem() 的实现中，调用了一个新增的虚函数 getItem()，因此，我们还至少需要实现一个 getItem()。因此，总体上来说，相对于继承自 PagerAdapter，更方便一些。</p>\n<blockquote>\n<ul>\n<li>getItem()<ul>\n<li>该类中新增的一个虚函数。函数的目的为生成新的 Fragment 对象。重载该函数时需要注意这一点。在需要时，该函数将被 instantiateItem() 所调用。如果需要向 Fragment 对象传递相对静态的数据时，我们一般通过 Fragment.setArguments() 来进行，这部分代码应当放到 getItem()。它们只会在新生成 Fragment 对象时执行一遍。如果需要在生成 Fragment 对象后，将数据集里面一些动态的数据传递给该 Fragment，那么，这部分代码不适合放到 getItem() 中。因为当数据集发生变化时，往往对应的 Fragment 已经生成，如果传递数据部分代码放到了 getItem() 中，这部分代码将不会被调用。这也是为什么很多人发现调用 PagerAdapter.notifyDataSetChanged() 后，getItem() 没有被调用的一个原因。</li>\n</ul>\n</li>\n<li>instantiateItem()<ul>\n<li>函数中判断一下要生成的 Fragment 是否已经生成过了，如果生成过了，就使用旧的，旧的将被 Fragment.attach()；如果没有，就调用 getItem() 生成一个新的，新的对象将被 FragmentTransation.add()。\nFragmentPagerAdapter 会将所有生成的 Fragment 对象通过 FragmentManager 保存起来备用，以后需要该 Fragment 时，都会从 FragmentManager 读取，而不会再次调用 getItem() 方法。\n如果需要在生成 Fragment 对象后，将数据集中的一些数据传递给该 Fragment，这部分代码应该放到这个函数的重载里。在我们继承的子类中，重载该函数，并调用 FragmentPagerAdapter.instantiateItem() 取得该函数返回 Fragment 对象，然后，我们该 Fragment 对象中对应的方法，将数据传递过去，然后返回该对象。\n否则，如果将这部分传递数据的代码放到 getItem()中，在 PagerAdapter.notifyDataSetChanged() 后，这部分数据设置代码将不会被调用。\ndestroyItem()\n该函数被调用后，会对 Fragment 进行 FragmentTransaction.detach()。这里不是 remove()，只是 detach()，因此 Fragment 还在 FragmentManager 管理中，Fragment 所占用的资源不会被释放。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"FragmentStatePagerAdapter\"><a href=\"#FragmentStatePagerAdapter\" class=\"headerlink\" title=\"FragmentStatePagerAdapter\"></a>FragmentStatePagerAdapter</h2><p>FragmentStatePagerAdapter 和前面的 FragmentPagerAdapter 一样，是继承子 PagerAdapter。但是，和 FragmentPagerAdapter 不一样的是，正如其类名中的 ‘State’ 所表明的含义一样，该 PagerAdapter 的实现将只保留当前页面，当页面离开视线后，就会被消除，释放其资源；而在页面需要显示时，生成新的页面(就像 ListView 的实现一样)。这么实现的好处就是当拥有大量的页面时，不必在内存中占用大量的内存。</p>\n<blockquote>\n<ul>\n<li>getItem()<ul>\n<li>一个该类中新增的虚函数。函数的目的为生成新的 Fragment 对象。Fragment.setArguments() 这种只会在新建 Fragment 时执行一次的参数传递代码，可以放在这里。由于 FragmentStatePagerAdapter.instantiateItem() 在大多数情况下，都将调用 getItem() 来生成新的对象，因此如果在该函数中放置与数据集相关的 setter 代码，基本上都可以在 instantiateItem() 被调用时执行，但这和设计意图不符。毕竟还有部分可能是不会调用 getItem() 的。因此这部分代码应该放到 instantiateItem() 中。</li>\n</ul>\n</li>\n<li>instantiateItem()<ul>\n<li>除非碰到 FragmentManager 刚好从 SavedState 中恢复了对应的 Fragment 的情况外，该函数将会调用 getItem() 函数，生成新的 Fragment 对象。新的对象将被 FragmentTransaction.add()。FragmentStatePagerAdapter 就是通过这种方式，每次都创建一个新的 Fragment，而在不用后就立刻释放其资源，来达到节省内存占用的目的的。</li>\n</ul>\n</li>\n<li>destroyItem()<ul>\n<li>将 Fragment 移除，即调用 FragmentTransaction.remove()，并释放其资源。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"Activity-ViewPager-Fragment实现懒加载\"><a href=\"#Activity-ViewPager-Fragment实现懒加载\" class=\"headerlink\" title=\"Activity, ViewPager, Fragment实现懒加载\"></a>Activity, ViewPager, Fragment实现懒加载</h1><h1 id=\"Activity启动与加载过程\"><a href=\"#Activity启动与加载过程\" class=\"headerlink\" title=\"Activity启动与加载过程\"></a>Activity启动与加载过程</h1><p>  当用户启动Activity时，Instrumentation会接收该请求，然后instrumentation利用Binder向ActivityManagerService发请求。ActivityManagerService内部维护者Activity的调用堆栈（ActivityStack）及各个Activity的状态同步，ActivityManagerService通过ActivityThread去管理Activity的状态从而完成Activity的生命周期的管理。</p>\n","excerpt":"","more":"<h1 id=\"Activity的启动模式（android-launchMode）\"><a href=\"#Activity的启动模式（android-launchMode）\" class=\"headerlink\" title=\"Activity的启动模式（android:launchMode）\"></a>Activity的启动模式（android:launchMode）</h1><ol>\n<li><p>standard 标准模式</p>\n<blockquote>\n<p>系统默认模式，每次启动ACtivity，不管该Activity的实例是否存在，都会创建一个新的实例。<strong>该Activity与启动它的Activity属于同一个任务栈</strong>。</p>\n<p>注意：applicationContext不可启动standard模式的Activity。因为非Activity的context类型没有任务栈，那么如果要启动该模式的Activity，那该Activity无法进入任务栈，那么该Activity就不属于任何任务栈。</p>\n</blockquote>\n</li>\n<li><p>singleTop</p>\n<blockquote>\n<p>栈顶复用模式。如果将要启动的Activity<strong>处于任务栈的顶部</strong>，那么该Activity会直接复用栈顶的实例。因为该Activity的实例已经存在，那么便不会执行onCreate和onStart，但会调用<strong>onNewIntent</strong>方法。在<strong>onNewIntent</strong>中可以取出这次请求的信息。但是如果该Activity不在任务栈的顶部，则会新建该Activity的实例。</p>\n</blockquote>\n</li>\n<li><p>singleTask</p>\n<blockquote>\n<p>栈内复用模式。如果即将启动的Activity在某个任务栈中存在，则直接复用该Activity实例。再次过程中，只会执行<strong>onNewIntnent</strong>。具体而言，当存在该Activity所需要的任务栈，那么在该任务栈中查找该Activity的实例，如果查找到则直接复用，否则新建该Activity的实例并入栈。如果不存在该Activity的任务栈，则新建一个任务栈，然后新建Activity实例，并入栈。</p>\n</blockquote>\n<p> <strong>注意：</strong>当栈内复用时，那么将会把栈内该Activity之上的所有实例出栈。 </p>\n</li>\n<li>singleInstance<blockquote>\n<p>栈内单例模式。如果某个Activity为该模式，那么该Activity只能单独的存在于某一个任务栈中，其他特征与singleTask相同。</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>注意：</strong> 上述任务栈是由taskAffinity属性来判定的，默认情况下所有的Activity的taskAffinity属性都是应用包名。如果想指定某个Activity所在的任务栈，修改该属性即可。该属性仅仅在于singleTask或allowTaskReparenting配合使用时才有意义。</p>\n<p>附：FLAF vs android:launchMode</p>\n<p>FLAG_ACTIVITY_NEW_TASK:singleTask</p>\n<p>FLAG_ACTIVITY_CLEAR_TOP: 如果该Activity在当前任务栈中存在实体，那么销毁栈中在其之上的Activity实例，然后创建一个新的实例添加到栈顶。</p>\n<p>FLAG_ACTIVITY_SINGLE_TOP: singleTop</p>\n<p>总结：使用FLAG则不支持singleInstance，使用android：launchMode则不支持CLEAR_TOP</p>\n<h1 id=\"Task字段说明\"><a href=\"#Task字段说明\" class=\"headerlink\" title=\"Task字段说明\"></a>Task字段说明</h1><ol>\n<li><p>Android:allowTaskReparenting</p>\n<blockquote>\n<p>该属性用来标记当Activity退居后台之后，是否能从启动它的Activity所在的任务栈移动到与它有相同taskAffinity的任务栈。eg：在应用中页面A启动了浏览器，那么此时打开的浏览器页面B与A是属于同一个任务栈的，当B退居后台之后，B就会移动到浏览器所在的任务栈中，并且处于该栈的顶部，所以当再次打开浏览器的时候，显示的是页面B。</p>\n</blockquote>\n</li>\n<li><p>android:allowRetainTaskState</p>\n<blockquote>\n<p>该属性用来标记是否能够保持原有的状态，但是该属性仅仅只对根Activity起作用（所谓根Activity一般指app的主页面）。</p>\n</blockquote>\n</li>\n<li>android:clearTaskOnLaunch<blockquote>\n<p>如果该属性为true，那么当启动该Activity时，便会清除该Activity所在任务栈的其他所有Activity。</p>\n</blockquote>\n</li>\n<li>android:finishOnTaskLaunch<blockquote>\n<p>如果设置该属性为true，那么点击home键回到屏幕之后，再次点击应用图标进入引用之后，系统自动销毁该Activity。</p>\n</blockquote>\n</li>\n<li>android:alwaysRetainTaskState<blockquote>\n<p>如果当前任务栈的根Activity的该属性设置为true，在该任务栈stop之后仍然保持该任务栈中所有Activity的状态。</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"系统配置变化导致的Activity变化\"><a href=\"#系统配置变化导致的Activity变化\" class=\"headerlink\" title=\"系统配置变化导致的Activity变化\"></a>系统配置变化导致的Activity变化</h1><h2 id=\"1-Device-Configurations\"><a href=\"#1-Device-Configurations\" class=\"headerlink\" title=\"1. Device Configurations\"></a>1. Device Configurations</h2><blockquote>\n<p>Orientation, Keyboard, Language.</p>\n<h2 id=\"2-原理简介及解决方案\"><a href=\"#2-原理简介及解决方案\" class=\"headerlink\" title=\"2. 原理简介及解决方案\"></a>2. 原理简介及解决方案</h2><p>一般情况下，当Device Configuration 在Application运行时发生变化，那么系统会自动重启该Activity（此时先onSaveInstance保存数据，然后执行onDestroy,最后执行onCreate）。</p>\n<p>所以我们必须在Activity销毁之前使用onSaveInsance保存数据，在onCreate或者onRestoreInsanceState中回复数据，以此来提供良好的用户体验。但是有时，<strong>我们需要保存大量的数据</strong>，遇到这种情况一般有两种解决方案：<br></p>\n</blockquote>\n<h3 id=\"a-引用对象\"><a href=\"#a-引用对象\" class=\"headerlink\" title=\"a. 引用对象\"></a>a. 引用对象</h3><blockquote>\n<p>由于在回调onSaveInstanceState保存的数据不适合保存大批量的数据对象（例如bitmap），而且保存的数据对象必须是Serialized的。这种情况下，当系统配置发送变化时，我们通过引用Fragment来保存数据，在fragment中保存数据对象。具体实现如下：</p>\n</blockquote>\n<pre><code>//注意：当保存数据时，千万不要保存任何引用Activity实例的对象，否则会造成内存泄漏\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RetainedFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// data object we want to retain</span></div><div class=\"line\">    <span class=\"keyword\">private</span> MyDataObject data;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// this method is only called once for this fragment</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        <span class=\"comment\">// retain this fragment</span></div><div class=\"line\">        setRetainInstance(<span class=\"keyword\">true</span>);**重点内容**</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(MyDataObject data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> MyDataObject <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后使用FragmentManager将fragment添加到Activity中。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">public</span> <span class=\"selector-tag\">class</span> <span class=\"selector-tag\">MyActivity</span> <span class=\"selector-tag\">extends</span> <span class=\"selector-tag\">Activity</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t    private RetainedFragment dataFragment;</div><div class=\"line\">\t</div><div class=\"line\">\t    <span class=\"variable\">@Override</span></div><div class=\"line\">\t    public void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">\t        super<span class=\"selector-class\">.onCreate</span>(savedInstanceState);</div><div class=\"line\">\t        setContentView(R<span class=\"selector-class\">.layout</span><span class=\"selector-class\">.main</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t        <span class=\"comment\">// find the retained fragment on activity restarts</span></div><div class=\"line\">\t        FragmentManager fm = getFragmentManager();</div><div class=\"line\">\t        dataFragment = (DataFragment) fm<span class=\"selector-class\">.findFragmentByTag</span>(“data”);</div><div class=\"line\">\t</div><div class=\"line\">\t        <span class=\"comment\">// create the fragment and data the first time</span></div><div class=\"line\">\t        <span class=\"selector-tag\">if</span> (dataFragment == null) &#123;</div><div class=\"line\">\t            <span class=\"comment\">// add the fragment</span></div><div class=\"line\">\t            dataFragment = new DataFragment();</div><div class=\"line\">\t            fm<span class=\"selector-class\">.beginTransaction</span>()<span class=\"selector-class\">.add</span>(dataFragment, “data”)<span class=\"selector-class\">.commit</span>();</div><div class=\"line\">\t            <span class=\"comment\">// load the data from the web</span></div><div class=\"line\">\t            dataFragment<span class=\"selector-class\">.setData</span>(loadMyData());</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t        <span class=\"comment\">// the data is available in dataFragment.getData()</span></div><div class=\"line\">\t        ...</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t    <span class=\"variable\">@Override</span></div><div class=\"line\">\t    public void onDestroy() &#123;</div><div class=\"line\">\t        super<span class=\"selector-class\">.onDestroy</span>();</div><div class=\"line\">\t        <span class=\"comment\">// store the data in the fragment</span></div><div class=\"line\">\t        dataFragment<span class=\"selector-class\">.setData</span>(collectMyLoadedData());</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"b-自己处理系统配置变化引起的改变\"><a href=\"#b-自己处理系统配置变化引起的改变\" class=\"headerlink\" title=\"b. 自己处理系统配置变化引起的改变\"></a>b. 自己处理系统配置变化引起的改变</h3><p> 当系统配置发生变化时，如果Activity不需要更新数据或自动应用资源，那么可以声明自己处理该配置变化。</p>\n<p> 首先,在AndroidManifest中作如下声明：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;activity android:<span class=\"built_in\">name</span>=<span class=\"string\">\".MyActivity\"</span></div><div class=\"line\">\t\t  &lt;<span class=\"comment\">-- 在此处定义自己要处理的变化--&gt;</span></div><div class=\"line\">          android:configChanges=<span class=\"string\">\"orientation|keyboardHidden\"</span></div><div class=\"line\">          android:label=<span class=\"string\">\"@string/app_name\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>当在xml中声明的任意配置发生变化时，<strong>系统不会自动重启该Activity</strong>，此时系统将回调onConfigurationChanged()。</p>\n<blockquote>\n<p><strong><em>注意：</em></strong> 当App的targetSdkVersion大于等于13，如果您想处理屏幕方向切换配置变化，那么你必须在android:configuration中包含screenSize属性。</p>\n</blockquote>\n<h1 id=\"Activity的各个方法及调用时机\"><a href=\"#Activity的各个方法及调用时机\" class=\"headerlink\" title=\"Activity的各个方法及调用时机\"></a>Activity的各个方法及调用时机</h1><h1 id=\"Fragment的各个方法及调用时机\"><a href=\"#Fragment的各个方法及调用时机\" class=\"headerlink\" title=\"Fragment的各个方法及调用时机\"></a>Fragment的各个方法及调用时机</h1><h1 id=\"FragmentManager\"><a href=\"#FragmentManager\" class=\"headerlink\" title=\"FragmentManager\"></a>FragmentManager</h1><h1 id=\"FragmentPagerAdapter-vs-FragmentStatePagerAdapter\"><a href=\"#FragmentPagerAdapter-vs-FragmentStatePagerAdapter\" class=\"headerlink\" title=\"FragmentPagerAdapter vs FragmentStatePagerAdapter\"></a>FragmentPagerAdapter vs FragmentStatePagerAdapter</h1><p>相信大家都使用过viewPager+PagerAdapter的方法来进行页面切换，其中PageAdapter提供page，viewPager显示page。当page的内容发生变化时，PagerAdapter将此变化通知给ViewPager，也就是说PagerAdapter负责创建Page、管理page，ViewPager负责显示page。但是因为各种各样的需求，要求PagerAdapter提供对page不同的管理方式，比如当page较少时，从page1切换到page2,再切换到page3时，要求不得将page1~page2销毁，这样当用户返回page1时，page1的内容会立马展示给用户；当page较多时，考虑到android系统对单一应用内存的限制，就不可能将所有的page保存起来，接下来我们详细了解一下系统为我们提供的各种PagerAdapter。</p>\n<h2 id=\"PagerAdapter\"><a href=\"#PagerAdapter\" class=\"headerlink\" title=\"PagerAdapter\"></a>PagerAdapter</h2><p>该类是page最简单的管理类，如果继承自该类，至少需要实现 instantiateItem(), destroyItem(), getCount() 以及 isViewFromObject()。</p>\n<blockquote>\n<ul>\n<li>getItemPosition()<ul>\n<li>该函数用以返回给定对象的位置，给定对象是由 instantiateItem() 的返回值<br>在 ViewPager.dataSetChanged() 中将对该函数的返回值进行判断，以决定是否最终触发 PagerAdapter.instantiateItem() 函数。\n在 PagerAdapter 中的实现是直接传回 POSITION_UNCHANGED。如果该函数不被重载，则会一直返回 POSITION_UNCHANGED，从而导致 ViewPager.dataSetChanged() 被调用时，认为不必触发 PagerAdapter.instantiateItem()。很多人因为没有重载该函数，而导致调用\nPagerAdapter.notifyDataSetChanged() 后，什么都没有发生。</li>\n</ul>\n</li>\n<li>public Object instantiateItem(View container, int position)<ul>\n<li>在每次 ViewPager 需要一个用以显示的 Object 的时候，该函数都会被 ViewPager.addNewItem() 调用。</li>\n</ul>\n</li>\n<li>public void notifyDataSetChanged() <ul>\n<li>在数据集发生变化的时候，一般 Activity 会调用 PagerAdapter.notifyDataSetChanged()，以通知 PagerAdapter，而 PagerAdapter 则会通知在自己这里注册过的所有 DataSetObserver。其中之一就是在 ViewPager.setAdapter() 中注册过的 PageObserver。PageObserver 则进而调用 ViewPager.dataSetChanged()，从而导致 ViewPager 开始触发更新其内含 View 的操作。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>```</p>\n<h2 id=\"FragmentPagerAdapter\"><a href=\"#FragmentPagerAdapter\" class=\"headerlink\" title=\"FragmentPagerAdapter\"></a>FragmentPagerAdapter</h2><p>FragmentPagerAdapter 继承自 PagerAdapter。相比通用的 PagerAdapter，该类更专注于每一页均为 Fragment 的情况。如文档所述，该类内的每一个生成的 Fragment 都将保存在内存之中，因此适用于那些相对静态的页，数量也比较少的那种；如果需要处理有很多页，并且数据动态性较大、占用内存较多的情况，应该使用FragmentStatePagerAdapter。FragmentPagerAdapter 重载实现了几个必须的函数，因此来自 PagerAdapter 的函数，我们只需要实现 getCount()，即可。且，由于 FragmentPagerAdapter.instantiateItem() 的实现中，调用了一个新增的虚函数 getItem()，因此，我们还至少需要实现一个 getItem()。因此，总体上来说，相对于继承自 PagerAdapter，更方便一些。</p>\n<blockquote>\n<ul>\n<li>getItem()<ul>\n<li>该类中新增的一个虚函数。函数的目的为生成新的 Fragment 对象。重载该函数时需要注意这一点。在需要时，该函数将被 instantiateItem() 所调用。如果需要向 Fragment 对象传递相对静态的数据时，我们一般通过 Fragment.setArguments() 来进行，这部分代码应当放到 getItem()。它们只会在新生成 Fragment 对象时执行一遍。如果需要在生成 Fragment 对象后，将数据集里面一些动态的数据传递给该 Fragment，那么，这部分代码不适合放到 getItem() 中。因为当数据集发生变化时，往往对应的 Fragment 已经生成，如果传递数据部分代码放到了 getItem() 中，这部分代码将不会被调用。这也是为什么很多人发现调用 PagerAdapter.notifyDataSetChanged() 后，getItem() 没有被调用的一个原因。</li>\n</ul>\n</li>\n<li>instantiateItem()<ul>\n<li>函数中判断一下要生成的 Fragment 是否已经生成过了，如果生成过了，就使用旧的，旧的将被 Fragment.attach()；如果没有，就调用 getItem() 生成一个新的，新的对象将被 FragmentTransation.add()。\nFragmentPagerAdapter 会将所有生成的 Fragment 对象通过 FragmentManager 保存起来备用，以后需要该 Fragment 时，都会从 FragmentManager 读取，而不会再次调用 getItem() 方法。\n如果需要在生成 Fragment 对象后，将数据集中的一些数据传递给该 Fragment，这部分代码应该放到这个函数的重载里。在我们继承的子类中，重载该函数，并调用 FragmentPagerAdapter.instantiateItem() 取得该函数返回 Fragment 对象，然后，我们该 Fragment 对象中对应的方法，将数据传递过去，然后返回该对象。\n否则，如果将这部分传递数据的代码放到 getItem()中，在 PagerAdapter.notifyDataSetChanged() 后，这部分数据设置代码将不会被调用。\ndestroyItem()\n该函数被调用后，会对 Fragment 进行 FragmentTransaction.detach()。这里不是 remove()，只是 detach()，因此 Fragment 还在 FragmentManager 管理中，Fragment 所占用的资源不会被释放。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"FragmentStatePagerAdapter\"><a href=\"#FragmentStatePagerAdapter\" class=\"headerlink\" title=\"FragmentStatePagerAdapter\"></a>FragmentStatePagerAdapter</h2><p>FragmentStatePagerAdapter 和前面的 FragmentPagerAdapter 一样，是继承子 PagerAdapter。但是，和 FragmentPagerAdapter 不一样的是，正如其类名中的 ‘State’ 所表明的含义一样，该 PagerAdapter 的实现将只保留当前页面，当页面离开视线后，就会被消除，释放其资源；而在页面需要显示时，生成新的页面(就像 ListView 的实现一样)。这么实现的好处就是当拥有大量的页面时，不必在内存中占用大量的内存。</p>\n<blockquote>\n<ul>\n<li>getItem()<ul>\n<li>一个该类中新增的虚函数。函数的目的为生成新的 Fragment 对象。Fragment.setArguments() 这种只会在新建 Fragment 时执行一次的参数传递代码，可以放在这里。由于 FragmentStatePagerAdapter.instantiateItem() 在大多数情况下，都将调用 getItem() 来生成新的对象，因此如果在该函数中放置与数据集相关的 setter 代码，基本上都可以在 instantiateItem() 被调用时执行，但这和设计意图不符。毕竟还有部分可能是不会调用 getItem() 的。因此这部分代码应该放到 instantiateItem() 中。</li>\n</ul>\n</li>\n<li>instantiateItem()<ul>\n<li>除非碰到 FragmentManager 刚好从 SavedState 中恢复了对应的 Fragment 的情况外，该函数将会调用 getItem() 函数，生成新的 Fragment 对象。新的对象将被 FragmentTransaction.add()。FragmentStatePagerAdapter 就是通过这种方式，每次都创建一个新的 Fragment，而在不用后就立刻释放其资源，来达到节省内存占用的目的的。</li>\n</ul>\n</li>\n<li>destroyItem()<ul>\n<li>将 Fragment 移除，即调用 FragmentTransaction.remove()，并释放其资源。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"Activity-ViewPager-Fragment实现懒加载\"><a href=\"#Activity-ViewPager-Fragment实现懒加载\" class=\"headerlink\" title=\"Activity, ViewPager, Fragment实现懒加载\"></a>Activity, ViewPager, Fragment实现懒加载</h1><h1 id=\"Activity启动与加载过程\"><a href=\"#Activity启动与加载过程\" class=\"headerlink\" title=\"Activity启动与加载过程\"></a>Activity启动与加载过程</h1><p>  当用户启动Activity时，Instrumentation会接收该请求，然后instrumentation利用Binder向ActivityManagerService发请求。ActivityManagerService内部维护者Activity的调用堆栈（ActivityStack）及各个Activity的状态同步，ActivityManagerService通过ActivityThread去管理Activity的状态从而完成Activity的生命周期的管理。</p>\n"},{"title":"android-Animation与Animator","date":"2016-08-17T02:56:30.000Z","_content":"##8.1 帧动画\n\n####8.2 View 动画\n#####分类：TranslateAnimation, ScaleAnimation, RotateAnimation, AlphaAnimation\n#####案例\n1. TranslateAnimation\n2. ScaleAnimation\n3. RotateAnimation\n4. AlphaAnimation\n\n##8.3 属性动画 /res/animator/\n\n","source":"_posts/android-Animation与Animator.md","raw":"---\ntitle: android-Animation与Animator\ndate: 2016-08-17 10:56:30\ncategories:\ntags:\n---\n##8.1 帧动画\n\n####8.2 View 动画\n#####分类：TranslateAnimation, ScaleAnimation, RotateAnimation, AlphaAnimation\n#####案例\n1. TranslateAnimation\n2. ScaleAnimation\n3. RotateAnimation\n4. AlphaAnimation\n\n##8.3 属性动画 /res/animator/\n\n","slug":"android-Animation与Animator","published":1,"updated":"2016-08-17T03:04:04.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjdk0006qo8fgc13ma2r","content":"<p>##8.1 帧动画</p>\n<p>####8.2 View 动画</p>\n<p>#####分类：TranslateAnimation, ScaleAnimation, RotateAnimation, AlphaAnimation</p>\n<p>#####案例</p>\n<ol>\n<li>TranslateAnimation</li>\n<li>ScaleAnimation</li>\n<li>RotateAnimation</li>\n<li>AlphaAnimation</li>\n</ol>\n<p>##8.3 属性动画 /res/animator/</p>\n","excerpt":"","more":"<p>##8.1 帧动画</p>\n<p>####8.2 View 动画</p>\n<p>#####分类：TranslateAnimation, ScaleAnimation, RotateAnimation, AlphaAnimation</p>\n<p>#####案例</p>\n<ol>\n<li>TranslateAnimation</li>\n<li>ScaleAnimation</li>\n<li>RotateAnimation</li>\n<li>AlphaAnimation</li>\n</ol>\n<p>##8.3 属性动画 /res/animator/</p>\n"},{"title":"android-Art与Dalvik","date":"2016-08-17T02:58:06.000Z","_content":"","source":"_posts/android-Art与Dalvik.md","raw":"---\ntitle: android-Art与Dalvik\ndate: 2016-08-17 10:58:06\ncategories:\ntags:\n---\n","slug":"android-Art与Dalvik","published":1,"updated":"2016-08-17T02:58:06.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjdm0008qo8fxoke4lgb","content":"","excerpt":"","more":""},{"title":"android-Binder","date":"2016-08-17T02:53:13.000Z","_content":"","source":"_posts/android-Binder.md","raw":"---\ntitle: android-Binder\ndate: 2016-08-17 10:53:13\ncategories:\ntags:\n---\n","slug":"android-Binder","published":1,"updated":"2016-08-17T02:53:13.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjdq0009qo8fvlcis2i4","content":"","excerpt":"","more":""},{"title":"android-BroadCast与StickBroadCast","date":"2016-08-17T02:56:15.000Z","_content":"","source":"_posts/android-BroadCast与StickBroadCast.md","raw":"---\ntitle: android-BroadCast与StickBroadCast\ndate: 2016-08-17 10:56:15\ncategories:\ntags:\n---\n","slug":"android-BroadCast与StickBroadCast","published":1,"updated":"2016-08-17T02:56:15.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjdw000bqo8fpa7nzbws","content":"","excerpt":"","more":""},{"title":"android-DecorView","date":"2016-08-17T03:03:26.000Z","_content":"![](http://i.imgur.com/0Snb7zd.png)\n\n>可见，DecorView由一个LinearLayout构成，这个LinearLayout又包括两个FramLayout，一个是ActionBar，一个是content。我们经常使用的setContentView(R.layout.activity_main)设置的就是content，它的id是android.R.id.content。\n\n：DecorView与Window是一一对应的。常见的Window有：Activity，Dialog，Toast。\n","source":"_posts/android-DecorView.md","raw":"---\ntitle: android-DecorView\ndate: 2016-08-17 11:03:26\ncategories:\ntags:\n---\n![](http://i.imgur.com/0Snb7zd.png)\n\n>可见，DecorView由一个LinearLayout构成，这个LinearLayout又包括两个FramLayout，一个是ActionBar，一个是content。我们经常使用的setContentView(R.layout.activity_main)设置的就是content，它的id是android.R.id.content。\n\n：DecorView与Window是一一对应的。常见的Window有：Activity，Dialog，Toast。\n","slug":"android-DecorView","published":1,"updated":"2016-08-17T03:03:39.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjdy000dqo8ft2zxt59n","content":"<p><img src=\"http://i.imgur.com/0Snb7zd.png\" alt=\"\"></p>\n<blockquote>\n<p>可见，DecorView由一个LinearLayout构成，这个LinearLayout又包括两个FramLayout，一个是ActionBar，一个是content。我们经常使用的setContentView(R.layout.activity_main)设置的就是content，它的id是android.R.id.content。</p>\n</blockquote>\n<p>：DecorView与Window是一一对应的。常见的Window有：Activity，Dialog，Toast。</p>\n","excerpt":"","more":"<p><img src=\"http://i.imgur.com/0Snb7zd.png\" alt=\"\"></p>\n<blockquote>\n<p>可见，DecorView由一个LinearLayout构成，这个LinearLayout又包括两个FramLayout，一个是ActionBar，一个是content。我们经常使用的setContentView(R.layout.activity_main)设置的就是content，它的id是android.R.id.content。</p>\n</blockquote>\n<p>：DecorView与Window是一一对应的。常见的Window有：Activity，Dialog，Toast。</p>\n"},{"title":"android-GestureDector","date":"2016-08-17T02:55:38.000Z","_content":"","source":"_posts/android-GestureDector.md","raw":"---\ntitle: android-GestureDector\ndate: 2016-08-17 10:55:38\ncategories:\ntags:\n---\n","slug":"android-GestureDector","published":1,"updated":"2016-08-17T02:55:38.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjdz000fqo8fbstp2kpa","content":"","excerpt":"","more":""},{"title":"android-MultiDex","date":"2016-08-17T02:00:30.000Z","_content":"\n#  MultiDex相关问题\ndex file :dalvik executable file\n## 为什么需要MultiDex\n用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用了short，4字节，所以无论如何，就导致了如果**一个dex**中的方法数（包含Android framework methods, library methods, and methods in your own code）不能超过65535。因此当我们项目中的方法书超过65535时就会报错：\n```\n早期版本报错如下：\nConversion to Dalvik format failed:\nUnable to execute dex: method ID not in [0, 0xffff]: 65536\n\n最近的版本报错如下：\ntrouble writing output:\nToo many field references: 131000; max is 65536.\nYou may try using --multi-dex option.\n```\n>这个限制通常被叫做：64k preference limit。在dexopt对dex优化时，会将dex中的方法存储在一个叫做LinearAlloc的缓冲区中，LinearAlloc缓冲区在不同版本的android手机上大小是不一样的，2.2、2.3仅有5M，android4.x提升到了8M或16M，所以当方法数过多时，dexopt就会奔溃导致程序异常终止。\n\n在android5.0之前，dalvik规定每一个apk只能包含一个dex文件，所以为了摆脱这个限制，你必须使用Google官方提供的MutiDex support library。当project编译完毕之后，MultiDex lib就会加载到primary dex中的文件，这样就可以管理其他dex的加载。\n>注意：如果你的工程要支持api20及以下，那么必须禁用android studio的instant run。\n\n在android50及以后，开始使用了art环境取代Dalvik，而art架构本身支持多dex文件的加载。在安装apk时，art会在扫描class(1...n).dex时进行预编译，将其打包成一个单独的.oat文件，在apk运行的时候就从这个单独的oat文件读取资源。\n>注意：如果你的minSdkVersion大于等于21，且你开启了instant run，那么android studio则会自动配置multidex。因为instant run仅在debug时起作用，那么在发布debug版时，你必须自己去配置multidex来突破64k限制。\n\n## 避免64k限制\n尽管已经有一些办法去解决64k限制了，但我们应当尽量去避免方法数超过64k，因为multidex的支持有很多限制：\n>* 如果第二个dex文件过大可能会导致应用ANR或crash。\n>* 在android4.0及以下，因为linearAlloc的bug，可能导致multidex不启用。\n>* 因为Dalvik LinearAlloc的限制，multidex可能会导致很大的内存分配，从而crash。在android4.0及以前，有很大的几率会发生crash，在android5.0之前的版本也有一定的几率会发生crash\n>* \n\n谷歌提供了两种方法来解决这个问题：\n\n1. Review your app's direct and transitive dependencies（然并卵）\n2. Remove unused code with ProGuard\n```\n...\nandroid {\n\n    ...\n    defaultConfig {\n        ...\n        // Enabling multidex support.\n        multiDexEnabled true\n        //移除无用的resource文件\n        shrinkResources true\n    }\n    ...\n}\n```\n\n## 配置Multidex\n有时我们无论怎么努力，因为某些第三方库的原因无可避免的达到了64k，那么我们就要学会怎么去配置multidex。在Android SDK Build Tools 21.1 及以上，开始支持在build.gradle中配置multidex，所以首先我们必须将sdk更新到21.1以上,然后按照以下步骤来操作。\n\n1 修改主module的build.gradle文件\n```\nandroid {\n    compileSdkVersion 21\n    buildToolsVersion \"21.1.0\"\n\n    defaultConfig {\n        ...\n        minSdkVersion 14\n        targetSdkVersion 21\n        ...\n\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\n\ndependencies {\n  //在sdk大于等于23时，则不需要了\n  compile 'com.android.support:multidex:1.0.0'\n}\n```\n2 继承或绑定MultiDexApplicaiton\n```\n    //方法1\n   public class  MyApplication extends MultiDexApplication\n   \n```\n如果MyApplication已经集成了其他Application，那么则只需要重写Application的attachBaseContext() 方法即可。\n```\n    public class  MyApplication extends OtherApplication{\n    \n        ...\n        protected void attachBaseContext(Context base) {\n            super.attachBaseContext(base);\n            MultiDex.install(this);\n        }\n        ...\n    \n    }\n```\n\n## 优化Multidex\nmultidex会带来很大的性能问题，因为它需要在运行时抉择把哪些文件加载到primary dex中,哪些文件加载到second dex中，这当然要比直接执行更加耗时。为了缓解该性能问题，谷歌提供了一种方案：\n\n```\nandroid {\n    productFlavors {\n        // Define separate dev and prod product flavors.\n        dev {\n            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin\n            // to pre-dex each module and produce an APK that can be tested on\n            // Android Lollipop without time consuming dex merging processes.\n            minSdkVersion 21\n        }\n        prod {\n            // The actual minSdkVersion for the application.\n            minSdkVersion 14\n        }\n    }\n          ...\n    buildTypes {\n        release {\n            runProguard true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'),\n                                                 'proguard-rules.pro'\n        }\n    }\n}\ndependencies {\n  compile 'com.android.support:multidex:1.0.0'\n}\n```\nAfter you have completed this configuration change, you can use the devDebug variant of your app, which combines the attributes of the dev productFlavor and the debug buildType. Using this target creates a debug app with proguard disabled, multidex enabled, and minSdkVersion set to Android API level 21. These settings cause the Android gradle plugin to do the following:\n\nBuild each module of the application (including dependencies) as separate dex files. This is commonly referred to as pre-dexing.\nInclude each dex file in the APK without modification.\nMost importantly, the module dex files will not be combined, and so the long-running calculation to determine the contents of the primary dex file is avoided.","source":"_posts/android-MultiDex.md","raw":"---\ntitle: android-MultiDex\ndate: 2016-08-17 10:00:30\ncategories: \"android\"\ntags: [\"android\", \"multidex\"]\n---\n\n#  MultiDex相关问题\ndex file :dalvik executable file\n## 为什么需要MultiDex\n用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用了short，4字节，所以无论如何，就导致了如果**一个dex**中的方法数（包含Android framework methods, library methods, and methods in your own code）不能超过65535。因此当我们项目中的方法书超过65535时就会报错：\n```\n早期版本报错如下：\nConversion to Dalvik format failed:\nUnable to execute dex: method ID not in [0, 0xffff]: 65536\n\n最近的版本报错如下：\ntrouble writing output:\nToo many field references: 131000; max is 65536.\nYou may try using --multi-dex option.\n```\n>这个限制通常被叫做：64k preference limit。在dexopt对dex优化时，会将dex中的方法存储在一个叫做LinearAlloc的缓冲区中，LinearAlloc缓冲区在不同版本的android手机上大小是不一样的，2.2、2.3仅有5M，android4.x提升到了8M或16M，所以当方法数过多时，dexopt就会奔溃导致程序异常终止。\n\n在android5.0之前，dalvik规定每一个apk只能包含一个dex文件，所以为了摆脱这个限制，你必须使用Google官方提供的MutiDex support library。当project编译完毕之后，MultiDex lib就会加载到primary dex中的文件，这样就可以管理其他dex的加载。\n>注意：如果你的工程要支持api20及以下，那么必须禁用android studio的instant run。\n\n在android50及以后，开始使用了art环境取代Dalvik，而art架构本身支持多dex文件的加载。在安装apk时，art会在扫描class(1...n).dex时进行预编译，将其打包成一个单独的.oat文件，在apk运行的时候就从这个单独的oat文件读取资源。\n>注意：如果你的minSdkVersion大于等于21，且你开启了instant run，那么android studio则会自动配置multidex。因为instant run仅在debug时起作用，那么在发布debug版时，你必须自己去配置multidex来突破64k限制。\n\n## 避免64k限制\n尽管已经有一些办法去解决64k限制了，但我们应当尽量去避免方法数超过64k，因为multidex的支持有很多限制：\n>* 如果第二个dex文件过大可能会导致应用ANR或crash。\n>* 在android4.0及以下，因为linearAlloc的bug，可能导致multidex不启用。\n>* 因为Dalvik LinearAlloc的限制，multidex可能会导致很大的内存分配，从而crash。在android4.0及以前，有很大的几率会发生crash，在android5.0之前的版本也有一定的几率会发生crash\n>* \n\n谷歌提供了两种方法来解决这个问题：\n\n1. Review your app's direct and transitive dependencies（然并卵）\n2. Remove unused code with ProGuard\n```\n...\nandroid {\n\n    ...\n    defaultConfig {\n        ...\n        // Enabling multidex support.\n        multiDexEnabled true\n        //移除无用的resource文件\n        shrinkResources true\n    }\n    ...\n}\n```\n\n## 配置Multidex\n有时我们无论怎么努力，因为某些第三方库的原因无可避免的达到了64k，那么我们就要学会怎么去配置multidex。在Android SDK Build Tools 21.1 及以上，开始支持在build.gradle中配置multidex，所以首先我们必须将sdk更新到21.1以上,然后按照以下步骤来操作。\n\n1 修改主module的build.gradle文件\n```\nandroid {\n    compileSdkVersion 21\n    buildToolsVersion \"21.1.0\"\n\n    defaultConfig {\n        ...\n        minSdkVersion 14\n        targetSdkVersion 21\n        ...\n\n        // Enabling multidex support.\n        multiDexEnabled true\n    }\n    ...\n}\n\ndependencies {\n  //在sdk大于等于23时，则不需要了\n  compile 'com.android.support:multidex:1.0.0'\n}\n```\n2 继承或绑定MultiDexApplicaiton\n```\n    //方法1\n   public class  MyApplication extends MultiDexApplication\n   \n```\n如果MyApplication已经集成了其他Application，那么则只需要重写Application的attachBaseContext() 方法即可。\n```\n    public class  MyApplication extends OtherApplication{\n    \n        ...\n        protected void attachBaseContext(Context base) {\n            super.attachBaseContext(base);\n            MultiDex.install(this);\n        }\n        ...\n    \n    }\n```\n\n## 优化Multidex\nmultidex会带来很大的性能问题，因为它需要在运行时抉择把哪些文件加载到primary dex中,哪些文件加载到second dex中，这当然要比直接执行更加耗时。为了缓解该性能问题，谷歌提供了一种方案：\n\n```\nandroid {\n    productFlavors {\n        // Define separate dev and prod product flavors.\n        dev {\n            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin\n            // to pre-dex each module and produce an APK that can be tested on\n            // Android Lollipop without time consuming dex merging processes.\n            minSdkVersion 21\n        }\n        prod {\n            // The actual minSdkVersion for the application.\n            minSdkVersion 14\n        }\n    }\n          ...\n    buildTypes {\n        release {\n            runProguard true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'),\n                                                 'proguard-rules.pro'\n        }\n    }\n}\ndependencies {\n  compile 'com.android.support:multidex:1.0.0'\n}\n```\nAfter you have completed this configuration change, you can use the devDebug variant of your app, which combines the attributes of the dev productFlavor and the debug buildType. Using this target creates a debug app with proguard disabled, multidex enabled, and minSdkVersion set to Android API level 21. These settings cause the Android gradle plugin to do the following:\n\nBuild each module of the application (including dependencies) as separate dex files. This is commonly referred to as pre-dexing.\nInclude each dex file in the APK without modification.\nMost importantly, the module dex files will not be combined, and so the long-running calculation to determine the contents of the primary dex file is avoided.","slug":"android-MultiDex","published":1,"updated":"2016-08-17T02:07:16.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnje1000gqo8fk43gnz14","content":"<h1 id=\"MultiDex相关问题\"><a href=\"#MultiDex相关问题\" class=\"headerlink\" title=\"MultiDex相关问题\"></a>MultiDex相关问题</h1><p>dex file :dalvik executable file</p>\n<h2 id=\"为什么需要MultiDex\"><a href=\"#为什么需要MultiDex\" class=\"headerlink\" title=\"为什么需要MultiDex\"></a>为什么需要MultiDex</h2><p>用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用了short，4字节，所以无论如何，就导致了如果<strong>一个dex</strong>中的方法数（包含Android framework methods, library methods, and methods in your own code）不能超过65535。因此当我们项目中的方法书超过65535时就会报错：\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">早期版本报错如下：</div><div class=\"line\">Conversion <span class=\"keyword\">to</span> Dalvik format failed:</div><div class=\"line\">Unable <span class=\"keyword\">to</span> execute dex: <span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">ID</span> <span class=\"title\">not</span> <span class=\"title\">in</span> [0, 0<span class=\"title\">xffff</span>]:</span> <span class=\"number\">65536</span></div><div class=\"line\"></div><div class=\"line\">最近的版本报错如下：</div><div class=\"line\">trouble writing output:</div><div class=\"line\">Too many field references: <span class=\"number\">131000</span>; max <span class=\"keyword\">is</span> <span class=\"number\">65536</span>.</div><div class=\"line\">You may <span class=\"keyword\">try</span> <span class=\"keyword\">using</span> --multi-dex option.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个限制通常被叫做：64k preference limit。在dexopt对dex优化时，会将dex中的方法存储在一个叫做LinearAlloc的缓冲区中，LinearAlloc缓冲区在不同版本的android手机上大小是不一样的，2.2、2.3仅有5M，android4.x提升到了8M或16M，所以当方法数过多时，dexopt就会奔溃导致程序异常终止。</p>\n</blockquote>\n<p>在android5.0之前，dalvik规定每一个apk只能包含一个dex文件，所以为了摆脱这个限制，你必须使用Google官方提供的MutiDex support library。当project编译完毕之后，MultiDex lib就会加载到primary dex中的文件，这样就可以管理其他dex的加载。</p>\n<blockquote>\n<p>注意：如果你的工程要支持api20及以下，那么必须禁用android studio的instant run。</p>\n</blockquote>\n<p>在android50及以后，开始使用了art环境取代Dalvik，而art架构本身支持多dex文件的加载。在安装apk时，art会在扫描class(1…n).dex时进行预编译，将其打包成一个单独的.oat文件，在apk运行的时候就从这个单独的oat文件读取资源。</p>\n<blockquote>\n<p>注意：如果你的minSdkVersion大于等于21，且你开启了instant run，那么android studio则会自动配置multidex。因为instant run仅在debug时起作用，那么在发布debug版时，你必须自己去配置multidex来突破64k限制。</p>\n</blockquote>\n<h2 id=\"避免64k限制\"><a href=\"#避免64k限制\" class=\"headerlink\" title=\"避免64k限制\"></a>避免64k限制</h2><p>尽管已经有一些办法去解决64k限制了，但我们应当尽量去避免方法数超过64k，因为multidex的支持有很多限制：</p>\n<blockquote>\n<ul>\n<li>如果第二个dex文件过大可能会导致应用ANR或crash。</li>\n<li>在android4.0及以下，因为linearAlloc的bug，可能导致multidex不启用。</li>\n<li>因为Dalvik LinearAlloc的限制，multidex可能会导致很大的内存分配，从而crash。在android4.0及以前，有很大的几率会发生crash，在android5.0之前的版本也有一定的几率会发生crash</li>\n<li></li>\n</ul>\n</blockquote>\n<p>谷歌提供了两种方法来解决这个问题：</p>\n<ol>\n<li>Review your app’s direct and transitive dependencies（然并卵）</li>\n<li>Remove unused code with ProGuard<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"params\">...</span></div><div class=\"line\">android &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\">        <span class=\"comment\">// Enabling multidex support.</span></div><div class=\"line\">        multiDexEnabled <span class=\"literal\">true</span></div><div class=\"line\">        <span class=\"comment\">//移除无用的resource文件</span></div><div class=\"line\">        shrinkResources <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"配置Multidex\"><a href=\"#配置Multidex\" class=\"headerlink\" title=\"配置Multidex\"></a>配置Multidex</h2><p>有时我们无论怎么努力，因为某些第三方库的原因无可避免的达到了64k，那么我们就要学会怎么去配置multidex。在Android SDK Build Tools 21.1 及以上，开始支持在build.gradle中配置multidex，所以首先我们必须将sdk更新到21.1以上,然后按照以下步骤来操作。</p>\n<p>1 修改主module的build.gradle文件\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">21</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"21.1.0\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">14</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">21</span></div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Enabling multidex support.</span></div><div class=\"line\">        multiDexEnabled <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  <span class=\"comment\">//在sdk大于等于23时，则不需要了</span></div><div class=\"line\">  compile <span class=\"string\">'com.android.support:multidex:1.0.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2 继承或绑定MultiDexApplicaiton\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//方法1</span></div><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">MultiDexApplication</span></span></div></pre></td></tr></table></figure></p>\n<p>如果MyApplication已经集成了其他Application，那么则只需要重写Application的attachBaseContext() 方法即可。\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">OtherApplication</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">protected</span> void attachBaseContext(<span class=\"type\">Context</span> base) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</div><div class=\"line\">        <span class=\"type\">MultiDex</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"优化Multidex\"><a href=\"#优化Multidex\" class=\"headerlink\" title=\"优化Multidex\"></a>优化Multidex</h2><p>multidex会带来很大的性能问题，因为它需要在运行时抉择把哪些文件加载到primary dex中,哪些文件加载到second dex中，这当然要比直接执行更加耗时。为了缓解该性能问题，谷歌提供了一种方案：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">        <span class=\"comment\">// Define separate dev and prod product flavors.</span></div><div class=\"line\">        dev &#123;</div><div class=\"line\">            <span class=\"comment\">// dev utilizes minSDKVersion = 21 to allow the Android gradle plugin</span></div><div class=\"line\">            <span class=\"comment\">// to pre-dex each module and produce an APK that can be tested on</span></div><div class=\"line\">            <span class=\"comment\">// Android Lollipop without time consuming dex merging processes.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">21</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        prod &#123;</div><div class=\"line\">            <span class=\"comment\">// The actual minSdkVersion for the application.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">14</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">          ...</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            runProguard <span class=\"keyword\">true</span></div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>),</div><div class=\"line\">                                                 <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:multidex:1.0.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>After you have completed this configuration change, you can use the devDebug variant of your app, which combines the attributes of the dev productFlavor and the debug buildType. Using this target creates a debug app with proguard disabled, multidex enabled, and minSdkVersion set to Android API level 21. These settings cause the Android gradle plugin to do the following:</p>\n<p>Build each module of the application (including dependencies) as separate dex files. This is commonly referred to as pre-dexing.\nInclude each dex file in the APK without modification.\nMost importantly, the module dex files will not be combined, and so the long-running calculation to determine the contents of the primary dex file is avoided.</p>\n","excerpt":"","more":"<h1 id=\"MultiDex相关问题\"><a href=\"#MultiDex相关问题\" class=\"headerlink\" title=\"MultiDex相关问题\"></a>MultiDex相关问题</h1><p>dex file :dalvik executable file</p>\n<h2 id=\"为什么需要MultiDex\"><a href=\"#为什么需要MultiDex\" class=\"headerlink\" title=\"为什么需要MultiDex\"></a>为什么需要MultiDex</h2><p>用Dalvik虚拟机的Android手机，在安装app的时候，会有一个优化dex的过程，使用dexopt将dex优化的更加高效于运行存储为odex，但是dexopt把每个类的方法id检索的链表长度使用了short，4字节，所以无论如何，就导致了如果<strong>一个dex</strong>中的方法数（包含Android framework methods, library methods, and methods in your own code）不能超过65535。因此当我们项目中的方法书超过65535时就会报错：\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">早期版本报错如下：</div><div class=\"line\">Conversion <span class=\"keyword\">to</span> Dalvik format failed:</div><div class=\"line\">Unable <span class=\"keyword\">to</span> execute dex: <span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">ID</span> <span class=\"title\">not</span> <span class=\"title\">in</span> [0, 0<span class=\"title\">xffff</span>]:</span> <span class=\"number\">65536</span></div><div class=\"line\"></div><div class=\"line\">最近的版本报错如下：</div><div class=\"line\">trouble writing output:</div><div class=\"line\">Too many field references: <span class=\"number\">131000</span>; max <span class=\"keyword\">is</span> <span class=\"number\">65536</span>.</div><div class=\"line\">You may <span class=\"keyword\">try</span> <span class=\"keyword\">using</span> --multi-dex option.</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个限制通常被叫做：64k preference limit。在dexopt对dex优化时，会将dex中的方法存储在一个叫做LinearAlloc的缓冲区中，LinearAlloc缓冲区在不同版本的android手机上大小是不一样的，2.2、2.3仅有5M，android4.x提升到了8M或16M，所以当方法数过多时，dexopt就会奔溃导致程序异常终止。</p>\n</blockquote>\n<p>在android5.0之前，dalvik规定每一个apk只能包含一个dex文件，所以为了摆脱这个限制，你必须使用Google官方提供的MutiDex support library。当project编译完毕之后，MultiDex lib就会加载到primary dex中的文件，这样就可以管理其他dex的加载。</p>\n<blockquote>\n<p>注意：如果你的工程要支持api20及以下，那么必须禁用android studio的instant run。</p>\n</blockquote>\n<p>在android50及以后，开始使用了art环境取代Dalvik，而art架构本身支持多dex文件的加载。在安装apk时，art会在扫描class(1…n).dex时进行预编译，将其打包成一个单独的.oat文件，在apk运行的时候就从这个单独的oat文件读取资源。</p>\n<blockquote>\n<p>注意：如果你的minSdkVersion大于等于21，且你开启了instant run，那么android studio则会自动配置multidex。因为instant run仅在debug时起作用，那么在发布debug版时，你必须自己去配置multidex来突破64k限制。</p>\n</blockquote>\n<h2 id=\"避免64k限制\"><a href=\"#避免64k限制\" class=\"headerlink\" title=\"避免64k限制\"></a>避免64k限制</h2><p>尽管已经有一些办法去解决64k限制了，但我们应当尽量去避免方法数超过64k，因为multidex的支持有很多限制：</p>\n<blockquote>\n<ul>\n<li>如果第二个dex文件过大可能会导致应用ANR或crash。</li>\n<li>在android4.0及以下，因为linearAlloc的bug，可能导致multidex不启用。</li>\n<li>因为Dalvik LinearAlloc的限制，multidex可能会导致很大的内存分配，从而crash。在android4.0及以前，有很大的几率会发生crash，在android5.0之前的版本也有一定的几率会发生crash</li>\n<li></li>\n</ul>\n</blockquote>\n<p>谷歌提供了两种方法来解决这个问题：</p>\n<ol>\n<li>Review your app’s direct and transitive dependencies（然并卵）</li>\n<li>Remove unused code with ProGuard<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"params\">...</span></div><div class=\"line\">android &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\">        <span class=\"comment\">// Enabling multidex support.</span></div><div class=\"line\">        multiDexEnabled <span class=\"literal\">true</span></div><div class=\"line\">        <span class=\"comment\">//移除无用的resource文件</span></div><div class=\"line\">        shrinkResources <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"配置Multidex\"><a href=\"#配置Multidex\" class=\"headerlink\" title=\"配置Multidex\"></a>配置Multidex</h2><p>有时我们无论怎么努力，因为某些第三方库的原因无可避免的达到了64k，那么我们就要学会怎么去配置multidex。在Android SDK Build Tools 21.1 及以上，开始支持在build.gradle中配置multidex，所以首先我们必须将sdk更新到21.1以上,然后按照以下步骤来操作。</p>\n<p>1 修改主module的build.gradle文件\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    compileSdkVersion <span class=\"number\">21</span></div><div class=\"line\">    buildToolsVersion <span class=\"string\">\"21.1.0\"</span></div><div class=\"line\"></div><div class=\"line\">    defaultConfig &#123;</div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\">        minSdkVersion <span class=\"number\">14</span></div><div class=\"line\">        targetSdkVersion <span class=\"number\">21</span></div><div class=\"line\">        <span class=\"params\">...</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Enabling multidex support.</span></div><div class=\"line\">        multiDexEnabled <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"params\">...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  <span class=\"comment\">//在sdk大于等于23时，则不需要了</span></div><div class=\"line\">  compile <span class=\"string\">'com.android.support:multidex:1.0.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2 继承或绑定MultiDexApplicaiton\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//方法1</span></div><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">MultiDexApplication</span></span></div></pre></td></tr></table></figure></p>\n<p>如果MyApplication已经集成了其他Application，那么则只需要重写Application的attachBaseContext() 方法即可。\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">OtherApplication</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"keyword\">protected</span> void attachBaseContext(<span class=\"type\">Context</span> base) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.attachBaseContext(base);</div><div class=\"line\">        <span class=\"type\">MultiDex</span>.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"优化Multidex\"><a href=\"#优化Multidex\" class=\"headerlink\" title=\"优化Multidex\"></a>优化Multidex</h2><p>multidex会带来很大的性能问题，因为它需要在运行时抉择把哪些文件加载到primary dex中,哪些文件加载到second dex中，这当然要比直接执行更加耗时。为了缓解该性能问题，谷歌提供了一种方案：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">android &#123;</div><div class=\"line\">    productFlavors &#123;</div><div class=\"line\">        <span class=\"comment\">// Define separate dev and prod product flavors.</span></div><div class=\"line\">        dev &#123;</div><div class=\"line\">            <span class=\"comment\">// dev utilizes minSDKVersion = 21 to allow the Android gradle plugin</span></div><div class=\"line\">            <span class=\"comment\">// to pre-dex each module and produce an APK that can be tested on</span></div><div class=\"line\">            <span class=\"comment\">// Android Lollipop without time consuming dex merging processes.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">21</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        prod &#123;</div><div class=\"line\">            <span class=\"comment\">// The actual minSdkVersion for the application.</span></div><div class=\"line\">            minSdkVersion <span class=\"number\">14</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">          ...</div><div class=\"line\">    buildTypes &#123;</div><div class=\"line\">        release &#123;</div><div class=\"line\">            runProguard <span class=\"keyword\">true</span></div><div class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>),</div><div class=\"line\">                                                 <span class=\"string\">'proguard-rules.pro'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:multidex:1.0.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>After you have completed this configuration change, you can use the devDebug variant of your app, which combines the attributes of the dev productFlavor and the debug buildType. Using this target creates a debug app with proguard disabled, multidex enabled, and minSdkVersion set to Android API level 21. These settings cause the Android gradle plugin to do the following:</p>\n<p>Build each module of the application (including dependencies) as separate dex files. This is commonly referred to as pre-dexing.\nInclude each dex file in the APK without modification.\nMost importantly, the module dex files will not be combined, and so the long-running calculation to determine the contents of the primary dex file is avoided.</p>\n"},{"title":"android-Scroller","date":"2016-08-17T03:02:50.000Z","_content":"1. View中的mScrollX, mScrollY这两个变量描述的是***现在View的内容的位置（x2， y2）相对于View所在位置(x1, y1)的值***, 即 mScrollX = x1 - x2, mScrollY = y1 - y2。 \n2. 通过Scroller, 滑动的**是View的内容**，而不是view本身\n3. scrollTo(x, y),x 是相对于View左边而言的，y是相对于view上边而言的。\n4. scrollTo没有累加效果，scrollBy有累加效果\n5. scroller只是用来做平滑的滑动，也就是说如果你要让某个View随着手机的滑动而滑动则必须使用scrollTo或scrllBy。只要使用了startScroll,就开始自动滑动了。\n#####原理解析\n> \n\n\n----------","source":"_posts/android-Scroller.md","raw":"---\ntitle: android-Scroller\ndate: 2016-08-17 11:02:50\ncategories:\ntags:\n---\n1. View中的mScrollX, mScrollY这两个变量描述的是***现在View的内容的位置（x2， y2）相对于View所在位置(x1, y1)的值***, 即 mScrollX = x1 - x2, mScrollY = y1 - y2。 \n2. 通过Scroller, 滑动的**是View的内容**，而不是view本身\n3. scrollTo(x, y),x 是相对于View左边而言的，y是相对于view上边而言的。\n4. scrollTo没有累加效果，scrollBy有累加效果\n5. scroller只是用来做平滑的滑动，也就是说如果你要让某个View随着手机的滑动而滑动则必须使用scrollTo或scrllBy。只要使用了startScroll,就开始自动滑动了。\n#####原理解析\n> \n\n\n----------","slug":"android-Scroller","published":1,"updated":"2016-08-17T03:03:07.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnje3000hqo8fhmjqtuou","content":"<ol>\n<li>View中的mScrollX, mScrollY这两个变量描述的是<strong><em>现在View的内容的位置（x2， y2）相对于View所在位置(x1, y1)的值</em></strong>, 即 mScrollX = x1 - x2, mScrollY = y1 - y2。 </li>\n<li>通过Scroller, 滑动的<strong>是View的内容</strong>，而不是view本身</li>\n<li>scrollTo(x, y),x 是相对于View左边而言的，y是相对于view上边而言的。</li>\n<li>scrollTo没有累加效果，scrollBy有累加效果</li>\n<li>scroller只是用来做平滑的滑动，也就是说如果你要让某个View随着手机的滑动而滑动则必须使用scrollTo或scrllBy。只要使用了startScroll,就开始自动滑动了。\n#####原理解析<blockquote>\n</blockquote>\n</li>\n</ol>\n<hr>\n","excerpt":"","more":"<ol>\n<li>View中的mScrollX, mScrollY这两个变量描述的是<strong><em>现在View的内容的位置（x2， y2）相对于View所在位置(x1, y1)的值</em></strong>, 即 mScrollX = x1 - x2, mScrollY = y1 - y2。 </li>\n<li>通过Scroller, 滑动的<strong>是View的内容</strong>，而不是view本身</li>\n<li>scrollTo(x, y),x 是相对于View左边而言的，y是相对于view上边而言的。</li>\n<li>scrollTo没有累加效果，scrollBy有累加效果</li>\n<li>scroller只是用来做平滑的滑动，也就是说如果你要让某个View随着手机的滑动而滑动则必须使用scrollTo或scrllBy。只要使用了startScroll,就开始自动滑动了。\n#####原理解析<blockquote>\n</blockquote>\n</li>\n</ol>\n<hr>\n"},{"title":"android-NDK","date":"2016-08-17T02:01:09.000Z","_content":"","source":"_posts/android-NDK.md","raw":"---\ntitle: android-NDK\ndate: 2016-08-17 10:01:09\ncategories:\ntags:\n---\n","slug":"android-NDK","published":1,"updated":"2016-08-17T02:01:10.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnje6000kqo8f2srkx37o","content":"","excerpt":"","more":""},{"title":"android-Service与IntentService","date":"2016-08-17T02:55:52.000Z","_content":"","source":"_posts/android-Service与IntentService.md","raw":"---\ntitle: android-Service与IntentService\ndate: 2016-08-17 10:55:52\ncategories:\ntags:\n---\n","slug":"android-Service与IntentService","published":1,"updated":"2016-08-17T02:55:52.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnje8000lqo8f6jpycyo2","content":"","excerpt":"","more":""},{"title":"android-SurfaceView","date":"2016-08-17T02:58:29.000Z","_content":"","source":"_posts/android-SurfaceView.md","raw":"---\ntitle: android-SurfaceView\ndate: 2016-08-17 10:58:29\ncategories:\ntags:\n---\n","slug":"android-SurfaceView","published":1,"updated":"2016-08-17T02:58:29.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjea000nqo8f5xva6xtb","content":"","excerpt":"","more":""},{"title":"android-ViewDragHelper","date":"2016-08-17T02:55:24.000Z","_content":"","source":"_posts/android-ViewDragHelper.md","raw":"---\ntitle: android-ViewDragHelper\ndate: 2016-08-17 10:55:24\ncategories:\ntags:\n---\n","slug":"android-ViewDragHelper","published":1,"updated":"2016-08-17T02:55:24.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjed000oqo8fb64ujaxw","content":"","excerpt":"","more":""},{"title":"androdid-WebView","date":"2016-08-17T01:53:28.000Z","_content":"","source":"_posts/android-WebView.md","raw":"---\ntitle: androdid-WebView\ndate: 2016-08-17 09:53:28\ncategories:\ntags:\n---\n","slug":"android-WebView","published":1,"updated":"2016-08-17T01:53:28.865Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjef000qqo8fx54mv1x9","content":"","excerpt":"","more":""},{"title":"android-Window","date":"2016-08-17T02:53:48.000Z","_content":"","source":"_posts/android-Window.md","raw":"---\ntitle: android-Window\ndate: 2016-08-17 10:53:48\ncategories:\ntags:\n---\n","slug":"android-Window","published":1,"updated":"2016-08-17T02:53:48.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjei000sqo8f1kvti2hu","content":"","excerpt":"","more":""},{"title":"android-handler","date":"2016-08-17T01:51:30.000Z","_content":"","source":"_posts/android-handler.md","raw":"---\ntitle: android-handler\ndate: 2016-08-17 09:51:30\ncategories:\ntags:\n---\n","slug":"android-handler","published":1,"updated":"2016-08-17T01:51:30.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjek000uqo8frx9qft9k","content":"","excerpt":"","more":""},{"title":"androdid-view-自定义view","date":"2016-08-17T01:53:16.000Z","_content":"\n# 一、 View绘制原理\n任何一个view从开始到绘制在屏幕上都要经历三个过程：测量、布局、绘制，分别对应为方法为：onMeasure(),onLayout, onDraw。measure用来测量view的宽和高，layout用来确定view在父容器中的**放置位置和最终大小**，而draw则负责将view绘制在屏幕上。其中onMeasure和onLayout可能不仅调用一次。和触摸事件的分发一样，view的绘制过程也是从DecorView开始的，接下来我们详细分析一下具体的过程。\n\n> view的测绘都是从ViewRoot开始的，viewRoot并不是一个view，而是一个handler。\n\n## 1. onMeasure(MeasureSpec, MeasureSpec)过程分析\nMeasureSpec是4字节整数，用来计量view的大小，高2位表示该view的绘制模式specMode，低30位来表示view的大小specSize。之所以要把SpecMode和SpecSize打包成一个int值，是为了避免过多的对象内存分配，方便操作。view的绘制模式一共有3种：\n>* Exactly : 父容器明确知道view的大小，即specSize记录了view精确的大小。对应LayoutParams中的match_parent 和 100dp。\n>* at_most : 父容器制定了一个最大值，view的大小不能大于它。对应LP中的wrap_content。\n>* unspecified : 父容器对view没有任何限制，要过大给多大，这种情况一般用于系统内部，表示一种测量状态。\n\n所谓绘制模式，其实是ViewGroup对view（或者子viewGroup）的绘制限制，请记住**不管是哪种绘制模式，parent对child的限制都是基于parent剩余的空间大小的**\n\n>MeasureSpec的形成。我们知道DecorView是viewTree最外层的view，那么它的MeasureSpec的生成必定是根据屏幕的宽高来生成的。而其他View的MeasureSpec都是在父容器的Spec及自己的LayoutParams的共同作用下生成的。\n\n> **ChildMeasureSpec = ChildLayoutParams + ParentMeasureSpec;**\n**DecorMeasureSpec = WindowSize + DecorLayoutParams**\n具体生成规则如表3.3.1-1所示：\n\n 表3.3.1-1\n\n![View#MeasureSpec生成规则](http://img.blog.csdn.net/20160724194418541)\n\n从表3.3.1-1中的结果可知：在自定义View时，如果要使用wrap_content属性，则必须重写onMeasure()方法，并为该View设置一个默认大小，否则默认为parent的大小。具体实现如下：\n\n```\n    protected void onMeasure(int widthMeasureSpec, int heightMeaureSpec){\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        \n        if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n        } else if (widthMode == MeasureSpec.AT_MOST) {\n            int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n            setMeasuredDimension(DEFAULT_WIDTH, heightSize);\n        } else if (heightMode == MeasureSpec.AT_MOST) {\n             int widhtSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n             setMeasuredDimension(widthSpecSize, DEFAULT_HEIGHT);\n        }\n        \n    }\n\n```\n\n## 2. layout过程\nlayout过程的作用是由ViewGroup用来确定child位置。当ViewGroup的位置确定之后，他会在onLayout方法中调用所有child的layout方法来确定child的位置。因为每一种不同的ViewGroup对child都有不同的规则限制，所以在ViewGroup#onLayout是abstract的，在每一具体的ViewGroup中（比如LinearLayout）中实现该方法来确定child的位置，然而view#onLayout是一个空方法。\n\n## 3. draw过程\n在确定了view的位置之后，就会开始绘制。当然draw也是从ViewGroup开始执行的。对于每一个view，ViewGroup的绘制过程都是：\n\n1. draw the backround\n（**drawBackground(canvas);**）\n2. draw the content\n（**onDraw(canvas);**）\n3. draw the children\n（**dispatchDraw(canvas);**）\n4. draw the decorations：*eg:foregroung, scrollbars*\n(**onDrawForeground(canvas);**)\n\n## 正确获取View高度的几种方案：\n1. Activity/View#onWindowFocusChanged\n2. view.post(new Runnable(){...});\n3. view.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener(){...});\n\n----------\n\n\n## 二、 自定义View\n>**自定义view须知**\n\n1. 支持padding属性\n2. 如何自定义属性\n3. 让view支持wrap_content\n4. View#post vs Handler\n5. view中如有动画或线程，请及时停止。View#onDeatchedFromWindow\n6. 滑动冲突的处理\n\n接下来我们会逐个解释上面6个**须知**，不过在这之前请先了解一下下面四个问题：坐标与坐标系，构造函数，手势处理、自定义view与自定义ViewGroup的区别。\n\n## 1、 坐标与坐标系\n\n在android系统中，坐标原点是屏幕左上角，x向右为正，y向下为证。\n\nview在绘制的时候，都是将其当做一个矩形来处理的，所以只需要左上、右下两个顶点即可确定view的位置，对应view的四个属性：mLeft, mTop, mRight, mBottom。除此之外，view还有其他几个参数：x, y, translationX, translationY。***请记住：view的这8个参数都是相对于父容器而言的。***他们之间的关系可以用下面的图和公式来说明：\n\n\n$$mWidth = mRight - mLeft$$\n$$mHeight = mBottom - mRight$$\n$$x = mLeft + translationX$$\n$$y = mTop + translationY$$\n\n>需要注意的是:view在平移的过程中，top和left的值并不会发生变化，从上面的公式中也可以看出，变化的仅是translationX, translationY, x, y。\n\n## 2、 构造函数\nview有三种构造函数，每一种均有不同的用途，接下来我们以自定义CustomView为例逐个说明解析。\n\n1. public CustomView(Context context){}\n一般用于直接new一个CustomView：CustomView pie = new CustomView(context);\n2. public CustomView(Context context, AttributeSet attrs){}\n在xml中使用时，会调用该构造函数，attrs中存储了在xml中定义的各种属性，包含系统属性及自定义属性。\n3. public CustomView(Context context, AttributeSet attrs, int defStyleAttr)\n该构造函数系统不会主动调用，一般都是在第二个构造函数中调用来为CustomView来指定style。系统默认实现的button中，其第二个构造函数如下：\n```\npublic Button(Context context, AttributeSet attrs) {\n    this(context, attrs, com.android.internal.R.attr.buttonStyle);\n}\n```\n\n所以如果我们要给CustomView指定一个默认的style，只需要像系统Button的实现一样。如果不调用第三个构造函数，即不指定defStyleAttr属性，则默认使用当前Activity或Application的style。\n\n## 3、 手势处理\n参见3.7节及第4章\n\n## 4、 自定义view和自定义ViewGroup的区别\n\n####问题汇总及解析：\n\n> \n\n----------\n\n\n# 三、 OverDraw\n## 常用的消除OverDraw的方法\n### 1. 设置window的背景为null;\n\n\n```\ngetWindow().setBackgroundDrawable(null);\n```\n\n### 2. 尽量少的设置布局的背景\n","source":"_posts/android-view-自定义view.md","raw":"---\ntitle: androdid-view-自定义view\ndate: 2016-08-17 09:53:16\ncategories: \"android\"\ntags: [\"android\", \"View绘制原理分析\", \"自定义View\"]\n---\n\n# 一、 View绘制原理\n任何一个view从开始到绘制在屏幕上都要经历三个过程：测量、布局、绘制，分别对应为方法为：onMeasure(),onLayout, onDraw。measure用来测量view的宽和高，layout用来确定view在父容器中的**放置位置和最终大小**，而draw则负责将view绘制在屏幕上。其中onMeasure和onLayout可能不仅调用一次。和触摸事件的分发一样，view的绘制过程也是从DecorView开始的，接下来我们详细分析一下具体的过程。\n\n> view的测绘都是从ViewRoot开始的，viewRoot并不是一个view，而是一个handler。\n\n## 1. onMeasure(MeasureSpec, MeasureSpec)过程分析\nMeasureSpec是4字节整数，用来计量view的大小，高2位表示该view的绘制模式specMode，低30位来表示view的大小specSize。之所以要把SpecMode和SpecSize打包成一个int值，是为了避免过多的对象内存分配，方便操作。view的绘制模式一共有3种：\n>* Exactly : 父容器明确知道view的大小，即specSize记录了view精确的大小。对应LayoutParams中的match_parent 和 100dp。\n>* at_most : 父容器制定了一个最大值，view的大小不能大于它。对应LP中的wrap_content。\n>* unspecified : 父容器对view没有任何限制，要过大给多大，这种情况一般用于系统内部，表示一种测量状态。\n\n所谓绘制模式，其实是ViewGroup对view（或者子viewGroup）的绘制限制，请记住**不管是哪种绘制模式，parent对child的限制都是基于parent剩余的空间大小的**\n\n>MeasureSpec的形成。我们知道DecorView是viewTree最外层的view，那么它的MeasureSpec的生成必定是根据屏幕的宽高来生成的。而其他View的MeasureSpec都是在父容器的Spec及自己的LayoutParams的共同作用下生成的。\n\n> **ChildMeasureSpec = ChildLayoutParams + ParentMeasureSpec;**\n**DecorMeasureSpec = WindowSize + DecorLayoutParams**\n具体生成规则如表3.3.1-1所示：\n\n 表3.3.1-1\n\n![View#MeasureSpec生成规则](http://img.blog.csdn.net/20160724194418541)\n\n从表3.3.1-1中的结果可知：在自定义View时，如果要使用wrap_content属性，则必须重写onMeasure()方法，并为该View设置一个默认大小，否则默认为parent的大小。具体实现如下：\n\n```\n    protected void onMeasure(int widthMeasureSpec, int heightMeaureSpec){\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        \n        if (widthSpecMode == MeasureSpec.AT_MOST && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n        } else if (widthMode == MeasureSpec.AT_MOST) {\n            int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n            setMeasuredDimension(DEFAULT_WIDTH, heightSize);\n        } else if (heightMode == MeasureSpec.AT_MOST) {\n             int widhtSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n             setMeasuredDimension(widthSpecSize, DEFAULT_HEIGHT);\n        }\n        \n    }\n\n```\n\n## 2. layout过程\nlayout过程的作用是由ViewGroup用来确定child位置。当ViewGroup的位置确定之后，他会在onLayout方法中调用所有child的layout方法来确定child的位置。因为每一种不同的ViewGroup对child都有不同的规则限制，所以在ViewGroup#onLayout是abstract的，在每一具体的ViewGroup中（比如LinearLayout）中实现该方法来确定child的位置，然而view#onLayout是一个空方法。\n\n## 3. draw过程\n在确定了view的位置之后，就会开始绘制。当然draw也是从ViewGroup开始执行的。对于每一个view，ViewGroup的绘制过程都是：\n\n1. draw the backround\n（**drawBackground(canvas);**）\n2. draw the content\n（**onDraw(canvas);**）\n3. draw the children\n（**dispatchDraw(canvas);**）\n4. draw the decorations：*eg:foregroung, scrollbars*\n(**onDrawForeground(canvas);**)\n\n## 正确获取View高度的几种方案：\n1. Activity/View#onWindowFocusChanged\n2. view.post(new Runnable(){...});\n3. view.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener(){...});\n\n----------\n\n\n## 二、 自定义View\n>**自定义view须知**\n\n1. 支持padding属性\n2. 如何自定义属性\n3. 让view支持wrap_content\n4. View#post vs Handler\n5. view中如有动画或线程，请及时停止。View#onDeatchedFromWindow\n6. 滑动冲突的处理\n\n接下来我们会逐个解释上面6个**须知**，不过在这之前请先了解一下下面四个问题：坐标与坐标系，构造函数，手势处理、自定义view与自定义ViewGroup的区别。\n\n## 1、 坐标与坐标系\n\n在android系统中，坐标原点是屏幕左上角，x向右为正，y向下为证。\n\nview在绘制的时候，都是将其当做一个矩形来处理的，所以只需要左上、右下两个顶点即可确定view的位置，对应view的四个属性：mLeft, mTop, mRight, mBottom。除此之外，view还有其他几个参数：x, y, translationX, translationY。***请记住：view的这8个参数都是相对于父容器而言的。***他们之间的关系可以用下面的图和公式来说明：\n\n\n$$mWidth = mRight - mLeft$$\n$$mHeight = mBottom - mRight$$\n$$x = mLeft + translationX$$\n$$y = mTop + translationY$$\n\n>需要注意的是:view在平移的过程中，top和left的值并不会发生变化，从上面的公式中也可以看出，变化的仅是translationX, translationY, x, y。\n\n## 2、 构造函数\nview有三种构造函数，每一种均有不同的用途，接下来我们以自定义CustomView为例逐个说明解析。\n\n1. public CustomView(Context context){}\n一般用于直接new一个CustomView：CustomView pie = new CustomView(context);\n2. public CustomView(Context context, AttributeSet attrs){}\n在xml中使用时，会调用该构造函数，attrs中存储了在xml中定义的各种属性，包含系统属性及自定义属性。\n3. public CustomView(Context context, AttributeSet attrs, int defStyleAttr)\n该构造函数系统不会主动调用，一般都是在第二个构造函数中调用来为CustomView来指定style。系统默认实现的button中，其第二个构造函数如下：\n```\npublic Button(Context context, AttributeSet attrs) {\n    this(context, attrs, com.android.internal.R.attr.buttonStyle);\n}\n```\n\n所以如果我们要给CustomView指定一个默认的style，只需要像系统Button的实现一样。如果不调用第三个构造函数，即不指定defStyleAttr属性，则默认使用当前Activity或Application的style。\n\n## 3、 手势处理\n参见3.7节及第4章\n\n## 4、 自定义view和自定义ViewGroup的区别\n\n####问题汇总及解析：\n\n> \n\n----------\n\n\n# 三、 OverDraw\n## 常用的消除OverDraw的方法\n### 1. 设置window的背景为null;\n\n\n```\ngetWindow().setBackgroundDrawable(null);\n```\n\n### 2. 尽量少的设置布局的背景\n","slug":"android-view-自定义view","published":1,"updated":"2016-08-17T02:22:29.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjel000vqo8fp9b787mr","content":"<h1 id=\"一、-View绘制原理\"><a href=\"#一、-View绘制原理\" class=\"headerlink\" title=\"一、 View绘制原理\"></a>一、 View绘制原理</h1><p>任何一个view从开始到绘制在屏幕上都要经历三个过程：测量、布局、绘制，分别对应为方法为：onMeasure(),onLayout, onDraw。measure用来测量view的宽和高，layout用来确定view在父容器中的<strong>放置位置和最终大小</strong>，而draw则负责将view绘制在屏幕上。其中onMeasure和onLayout可能不仅调用一次。和触摸事件的分发一样，view的绘制过程也是从DecorView开始的，接下来我们详细分析一下具体的过程。</p>\n<blockquote>\n<p>view的测绘都是从ViewRoot开始的，viewRoot并不是一个view，而是一个handler。</p>\n</blockquote>\n<h2 id=\"1-onMeasure-MeasureSpec-MeasureSpec-过程分析\"><a href=\"#1-onMeasure-MeasureSpec-MeasureSpec-过程分析\" class=\"headerlink\" title=\"1. onMeasure(MeasureSpec, MeasureSpec)过程分析\"></a>1. onMeasure(MeasureSpec, MeasureSpec)过程分析</h2><p>MeasureSpec是4字节整数，用来计量view的大小，高2位表示该view的绘制模式specMode，低30位来表示view的大小specSize。之所以要把SpecMode和SpecSize打包成一个int值，是为了避免过多的对象内存分配，方便操作。view的绘制模式一共有3种：</p>\n<blockquote>\n<ul>\n<li>Exactly : 父容器明确知道view的大小，即specSize记录了view精确的大小。对应LayoutParams中的match_parent 和 100dp。</li>\n<li>at_most : 父容器制定了一个最大值，view的大小不能大于它。对应LP中的wrap_content。</li>\n<li>unspecified : 父容器对view没有任何限制，要过大给多大，这种情况一般用于系统内部，表示一种测量状态。</li>\n</ul>\n</blockquote>\n<p>所谓绘制模式，其实是ViewGroup对view（或者子viewGroup）的绘制限制，请记住<strong>不管是哪种绘制模式，parent对child的限制都是基于parent剩余的空间大小的</strong></p>\n<blockquote>\n<p>MeasureSpec的形成。我们知道DecorView是viewTree最外层的view，那么它的MeasureSpec的生成必定是根据屏幕的宽高来生成的。而其他View的MeasureSpec都是在父容器的Spec及自己的LayoutParams的共同作用下生成的。</p>\n<p><strong>ChildMeasureSpec = ChildLayoutParams + ParentMeasureSpec;</strong>\n<strong>DecorMeasureSpec = WindowSize + DecorLayoutParams</strong>\n具体生成规则如表3.3.1-1所示：</p>\n</blockquote>\n<p> 表3.3.1-1</p>\n<p><img src=\"http://img.blog.csdn.net/20160724194418541\" alt=\"View#MeasureSpec生成规则\"></p>\n<p>从表3.3.1-1中的结果可知：在自定义View时，如果要使用wrap_content属性，则必须重写onMeasure()方法，并为该View设置一个默认大小，否则默认为parent的大小。具体实现如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeaureSpec)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);</div><div class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(widthMode == MeasureSpec.AT_MOST)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">        setMeasuredDimension(DEFAULT_WIDTH, heightSize);</div><div class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(heightMode == MeasureSpec.AT_MOST)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">int</span> widhtSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">         setMeasuredDimension(widthSpecSize, DEFAULT_HEIGHT);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-layout过程\"><a href=\"#2-layout过程\" class=\"headerlink\" title=\"2. layout过程\"></a>2. layout过程</h2><p>layout过程的作用是由ViewGroup用来确定child位置。当ViewGroup的位置确定之后，他会在onLayout方法中调用所有child的layout方法来确定child的位置。因为每一种不同的ViewGroup对child都有不同的规则限制，所以在ViewGroup#onLayout是abstract的，在每一具体的ViewGroup中（比如LinearLayout）中实现该方法来确定child的位置，然而view#onLayout是一个空方法。</p>\n<h2 id=\"3-draw过程\"><a href=\"#3-draw过程\" class=\"headerlink\" title=\"3. draw过程\"></a>3. draw过程</h2><p>在确定了view的位置之后，就会开始绘制。当然draw也是从ViewGroup开始执行的。对于每一个view，ViewGroup的绘制过程都是：</p>\n<ol>\n<li>draw the backround\n（<strong>drawBackground(canvas);</strong>）</li>\n<li>draw the content\n（<strong>onDraw(canvas);</strong>）</li>\n<li>draw the children\n（<strong>dispatchDraw(canvas);</strong>）</li>\n<li>draw the decorations：<em>eg:foregroung, scrollbars</em>\n(<strong>onDrawForeground(canvas);</strong>)</li>\n</ol>\n<h2 id=\"正确获取View高度的几种方案：\"><a href=\"#正确获取View高度的几种方案：\" class=\"headerlink\" title=\"正确获取View高度的几种方案：\"></a>正确获取View高度的几种方案：</h2><ol>\n<li>Activity/View#onWindowFocusChanged</li>\n<li>view.post(new Runnable(){…});</li>\n<li>view.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener(){…});</li>\n</ol>\n<hr>\n<h2 id=\"二、-自定义View\"><a href=\"#二、-自定义View\" class=\"headerlink\" title=\"二、 自定义View\"></a>二、 自定义View</h2><blockquote>\n<p><strong>自定义view须知</strong></p>\n</blockquote>\n<ol>\n<li>支持padding属性</li>\n<li>如何自定义属性</li>\n<li>让view支持wrap_content</li>\n<li>View#post vs Handler</li>\n<li>view中如有动画或线程，请及时停止。View#onDeatchedFromWindow</li>\n<li>滑动冲突的处理</li>\n</ol>\n<p>接下来我们会逐个解释上面6个<strong>须知</strong>，不过在这之前请先了解一下下面四个问题：坐标与坐标系，构造函数，手势处理、自定义view与自定义ViewGroup的区别。</p>\n<h2 id=\"1、-坐标与坐标系\"><a href=\"#1、-坐标与坐标系\" class=\"headerlink\" title=\"1、 坐标与坐标系\"></a>1、 坐标与坐标系</h2><p>在android系统中，坐标原点是屏幕左上角，x向右为正，y向下为证。</p>\n<p>view在绘制的时候，都是将其当做一个矩形来处理的，所以只需要左上、右下两个顶点即可确定view的位置，对应view的四个属性：mLeft, mTop, mRight, mBottom。除此之外，view还有其他几个参数：x, y, translationX, translationY。<strong><em>请记住：view的这8个参数都是相对于父容器而言的。</em></strong>他们之间的关系可以用下面的图和公式来说明：</p>\n<p>$$mWidth = mRight - mLeft$$\n$$mHeight = mBottom - mRight$$\n$$x = mLeft + translationX$$\n$$y = mTop + translationY$$</p>\n<blockquote>\n<p>需要注意的是:view在平移的过程中，top和left的值并不会发生变化，从上面的公式中也可以看出，变化的仅是translationX, translationY, x, y。</p>\n</blockquote>\n<h2 id=\"2、-构造函数\"><a href=\"#2、-构造函数\" class=\"headerlink\" title=\"2、 构造函数\"></a>2、 构造函数</h2><p>view有三种构造函数，每一种均有不同的用途，接下来我们以自定义CustomView为例逐个说明解析。</p>\n<ol>\n<li>public CustomView(Context context){}\n一般用于直接new一个CustomView：CustomView pie = new CustomView(context);</li>\n<li>public CustomView(Context context, AttributeSet attrs){}\n在xml中使用时，会调用该构造函数，attrs中存储了在xml中定义的各种属性，包含系统属性及自定义属性。</li>\n<li>public CustomView(Context context, AttributeSet attrs, int defStyleAttr)\n该构造函数系统不会主动调用，一般都是在第二个构造函数中调用来为CustomView来指定style。系统默认实现的button中，其第二个构造函数如下：<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Button</span>(<span class=\"params\">Context context, AttributeSet attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(context, attrs, com.android.<span class=\"keyword\">internal</span>.R.attr.buttonStyle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>所以如果我们要给CustomView指定一个默认的style，只需要像系统Button的实现一样。如果不调用第三个构造函数，即不指定defStyleAttr属性，则默认使用当前Activity或Application的style。</p>\n<h2 id=\"3、-手势处理\"><a href=\"#3、-手势处理\" class=\"headerlink\" title=\"3、 手势处理\"></a>3、 手势处理</h2><p>参见3.7节及第4章</p>\n<h2 id=\"4、-自定义view和自定义ViewGroup的区别\"><a href=\"#4、-自定义view和自定义ViewGroup的区别\" class=\"headerlink\" title=\"4、 自定义view和自定义ViewGroup的区别\"></a>4、 自定义view和自定义ViewGroup的区别</h2><p>####问题汇总及解析：</p>\n<blockquote>\n</blockquote>\n<hr>\n<h1 id=\"三、-OverDraw\"><a href=\"#三、-OverDraw\" class=\"headerlink\" title=\"三、 OverDraw\"></a>三、 OverDraw</h1><h2 id=\"常用的消除OverDraw的方法\"><a href=\"#常用的消除OverDraw的方法\" class=\"headerlink\" title=\"常用的消除OverDraw的方法\"></a>常用的消除OverDraw的方法</h2><h3 id=\"1-设置window的背景为null\"><a href=\"#1-设置window的背景为null\" class=\"headerlink\" title=\"1. 设置window的背景为null;\"></a>1. 设置window的背景为null;</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getWindow().setBackgroundDrawable(null)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-尽量少的设置布局的背景\"><a href=\"#2-尽量少的设置布局的背景\" class=\"headerlink\" title=\"2. 尽量少的设置布局的背景\"></a>2. 尽量少的设置布局的背景</h3>","excerpt":"","more":"<h1 id=\"一、-View绘制原理\"><a href=\"#一、-View绘制原理\" class=\"headerlink\" title=\"一、 View绘制原理\"></a>一、 View绘制原理</h1><p>任何一个view从开始到绘制在屏幕上都要经历三个过程：测量、布局、绘制，分别对应为方法为：onMeasure(),onLayout, onDraw。measure用来测量view的宽和高，layout用来确定view在父容器中的<strong>放置位置和最终大小</strong>，而draw则负责将view绘制在屏幕上。其中onMeasure和onLayout可能不仅调用一次。和触摸事件的分发一样，view的绘制过程也是从DecorView开始的，接下来我们详细分析一下具体的过程。</p>\n<blockquote>\n<p>view的测绘都是从ViewRoot开始的，viewRoot并不是一个view，而是一个handler。</p>\n</blockquote>\n<h2 id=\"1-onMeasure-MeasureSpec-MeasureSpec-过程分析\"><a href=\"#1-onMeasure-MeasureSpec-MeasureSpec-过程分析\" class=\"headerlink\" title=\"1. onMeasure(MeasureSpec, MeasureSpec)过程分析\"></a>1. onMeasure(MeasureSpec, MeasureSpec)过程分析</h2><p>MeasureSpec是4字节整数，用来计量view的大小，高2位表示该view的绘制模式specMode，低30位来表示view的大小specSize。之所以要把SpecMode和SpecSize打包成一个int值，是为了避免过多的对象内存分配，方便操作。view的绘制模式一共有3种：</p>\n<blockquote>\n<ul>\n<li>Exactly : 父容器明确知道view的大小，即specSize记录了view精确的大小。对应LayoutParams中的match_parent 和 100dp。</li>\n<li>at_most : 父容器制定了一个最大值，view的大小不能大于它。对应LP中的wrap_content。</li>\n<li>unspecified : 父容器对view没有任何限制，要过大给多大，这种情况一般用于系统内部，表示一种测量状态。</li>\n</ul>\n</blockquote>\n<p>所谓绘制模式，其实是ViewGroup对view（或者子viewGroup）的绘制限制，请记住<strong>不管是哪种绘制模式，parent对child的限制都是基于parent剩余的空间大小的</strong></p>\n<blockquote>\n<p>MeasureSpec的形成。我们知道DecorView是viewTree最外层的view，那么它的MeasureSpec的生成必定是根据屏幕的宽高来生成的。而其他View的MeasureSpec都是在父容器的Spec及自己的LayoutParams的共同作用下生成的。</p>\n<p><strong>ChildMeasureSpec = ChildLayoutParams + ParentMeasureSpec;</strong>\n<strong>DecorMeasureSpec = WindowSize + DecorLayoutParams</strong>\n具体生成规则如表3.3.1-1所示：</p>\n</blockquote>\n<p> 表3.3.1-1</p>\n<p><img src=\"http://img.blog.csdn.net/20160724194418541\" alt=\"View#MeasureSpec生成规则\"></p>\n<p>从表3.3.1-1中的结果可知：在自定义View时，如果要使用wrap_content属性，则必须重写onMeasure()方法，并为该View设置一个默认大小，否则默认为parent的大小。具体实现如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeaureSpec)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">        setMeasuredDimension(DEFAULT_WIDTH, DEFAULT_HEIGHT);</div><div class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(widthMode == MeasureSpec.AT_MOST)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">        setMeasuredDimension(DEFAULT_WIDTH, heightSize);</div><div class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> <span class=\"params\">(heightMode == MeasureSpec.AT_MOST)</span> </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">int</span> widhtSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">         setMeasuredDimension(widthSpecSize, DEFAULT_HEIGHT);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2-layout过程\"><a href=\"#2-layout过程\" class=\"headerlink\" title=\"2. layout过程\"></a>2. layout过程</h2><p>layout过程的作用是由ViewGroup用来确定child位置。当ViewGroup的位置确定之后，他会在onLayout方法中调用所有child的layout方法来确定child的位置。因为每一种不同的ViewGroup对child都有不同的规则限制，所以在ViewGroup#onLayout是abstract的，在每一具体的ViewGroup中（比如LinearLayout）中实现该方法来确定child的位置，然而view#onLayout是一个空方法。</p>\n<h2 id=\"3-draw过程\"><a href=\"#3-draw过程\" class=\"headerlink\" title=\"3. draw过程\"></a>3. draw过程</h2><p>在确定了view的位置之后，就会开始绘制。当然draw也是从ViewGroup开始执行的。对于每一个view，ViewGroup的绘制过程都是：</p>\n<ol>\n<li>draw the backround\n（<strong>drawBackground(canvas);</strong>）</li>\n<li>draw the content\n（<strong>onDraw(canvas);</strong>）</li>\n<li>draw the children\n（<strong>dispatchDraw(canvas);</strong>）</li>\n<li>draw the decorations：<em>eg:foregroung, scrollbars</em>\n(<strong>onDrawForeground(canvas);</strong>)</li>\n</ol>\n<h2 id=\"正确获取View高度的几种方案：\"><a href=\"#正确获取View高度的几种方案：\" class=\"headerlink\" title=\"正确获取View高度的几种方案：\"></a>正确获取View高度的几种方案：</h2><ol>\n<li>Activity/View#onWindowFocusChanged</li>\n<li>view.post(new Runnable(){…});</li>\n<li>view.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener(){…});</li>\n</ol>\n<hr>\n<h2 id=\"二、-自定义View\"><a href=\"#二、-自定义View\" class=\"headerlink\" title=\"二、 自定义View\"></a>二、 自定义View</h2><blockquote>\n<p><strong>自定义view须知</strong></p>\n</blockquote>\n<ol>\n<li>支持padding属性</li>\n<li>如何自定义属性</li>\n<li>让view支持wrap_content</li>\n<li>View#post vs Handler</li>\n<li>view中如有动画或线程，请及时停止。View#onDeatchedFromWindow</li>\n<li>滑动冲突的处理</li>\n</ol>\n<p>接下来我们会逐个解释上面6个<strong>须知</strong>，不过在这之前请先了解一下下面四个问题：坐标与坐标系，构造函数，手势处理、自定义view与自定义ViewGroup的区别。</p>\n<h2 id=\"1、-坐标与坐标系\"><a href=\"#1、-坐标与坐标系\" class=\"headerlink\" title=\"1、 坐标与坐标系\"></a>1、 坐标与坐标系</h2><p>在android系统中，坐标原点是屏幕左上角，x向右为正，y向下为证。</p>\n<p>view在绘制的时候，都是将其当做一个矩形来处理的，所以只需要左上、右下两个顶点即可确定view的位置，对应view的四个属性：mLeft, mTop, mRight, mBottom。除此之外，view还有其他几个参数：x, y, translationX, translationY。<strong><em>请记住：view的这8个参数都是相对于父容器而言的。</em></strong>他们之间的关系可以用下面的图和公式来说明：</p>\n<p>$$mWidth = mRight - mLeft$$\n$$mHeight = mBottom - mRight$$\n$$x = mLeft + translationX$$\n$$y = mTop + translationY$$</p>\n<blockquote>\n<p>需要注意的是:view在平移的过程中，top和left的值并不会发生变化，从上面的公式中也可以看出，变化的仅是translationX, translationY, x, y。</p>\n</blockquote>\n<h2 id=\"2、-构造函数\"><a href=\"#2、-构造函数\" class=\"headerlink\" title=\"2、 构造函数\"></a>2、 构造函数</h2><p>view有三种构造函数，每一种均有不同的用途，接下来我们以自定义CustomView为例逐个说明解析。</p>\n<ol>\n<li>public CustomView(Context context){}\n一般用于直接new一个CustomView：CustomView pie = new CustomView(context);</li>\n<li>public CustomView(Context context, AttributeSet attrs){}\n在xml中使用时，会调用该构造函数，attrs中存储了在xml中定义的各种属性，包含系统属性及自定义属性。</li>\n<li>public CustomView(Context context, AttributeSet attrs, int defStyleAttr)\n该构造函数系统不会主动调用，一般都是在第二个构造函数中调用来为CustomView来指定style。系统默认实现的button中，其第二个构造函数如下：<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Button</span>(<span class=\"params\">Context context, AttributeSet attrs</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(context, attrs, com.android.<span class=\"keyword\">internal</span>.R.attr.buttonStyle);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>所以如果我们要给CustomView指定一个默认的style，只需要像系统Button的实现一样。如果不调用第三个构造函数，即不指定defStyleAttr属性，则默认使用当前Activity或Application的style。</p>\n<h2 id=\"3、-手势处理\"><a href=\"#3、-手势处理\" class=\"headerlink\" title=\"3、 手势处理\"></a>3、 手势处理</h2><p>参见3.7节及第4章</p>\n<h2 id=\"4、-自定义view和自定义ViewGroup的区别\"><a href=\"#4、-自定义view和自定义ViewGroup的区别\" class=\"headerlink\" title=\"4、 自定义view和自定义ViewGroup的区别\"></a>4、 自定义view和自定义ViewGroup的区别</h2><p>####问题汇总及解析：</p>\n<blockquote>\n</blockquote>\n<hr>\n<h1 id=\"三、-OverDraw\"><a href=\"#三、-OverDraw\" class=\"headerlink\" title=\"三、 OverDraw\"></a>三、 OverDraw</h1><h2 id=\"常用的消除OverDraw的方法\"><a href=\"#常用的消除OverDraw的方法\" class=\"headerlink\" title=\"常用的消除OverDraw的方法\"></a>常用的消除OverDraw的方法</h2><h3 id=\"1-设置window的背景为null\"><a href=\"#1-设置window的背景为null\" class=\"headerlink\" title=\"1. 设置window的背景为null;\"></a>1. 设置window的背景为null;</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getWindow().setBackgroundDrawable(null)<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-尽量少的设置布局的背景\"><a href=\"#2-尽量少的设置布局的背景\" class=\"headerlink\" title=\"2. 尽量少的设置布局的背景\"></a>2. 尽量少的设置布局的背景</h3>"},{"title":"androdid-安全机制","date":"2016-08-17T01:53:38.000Z","_content":"##12.1 沙箱\n\n##12.2 用户权限机制\n\n##12.3 应用权限机制 ","source":"_posts/android-安全机制.md","raw":"---\ntitle: androdid-安全机制\ndate: 2016-08-17 09:53:38\ncategories:\ntags:\n---\n##12.1 沙箱\n\n##12.2 用户权限机制\n\n##12.3 应用权限机制 ","slug":"android-安全机制","published":1,"updated":"2016-08-17T03:04:32.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjem000wqo8fwgi04518","content":"<p>##12.1 沙箱</p>\n<p>##12.2 用户权限机制</p>\n<p>##12.3 应用权限机制 </p>\n","excerpt":"","more":"<p>##12.1 沙箱</p>\n<p>##12.2 用户权限机制</p>\n<p>##12.3 应用权限机制 </p>\n"},{"title":"android-常见内存泄漏分析及解决方案","date":"2016-08-17T06:07:05.000Z","_content":"","source":"_posts/android-常见内存泄漏分析及解决方案.md","raw":"---\ntitle: android-常见内存泄漏分析及解决方案\ndate: 2016-08-17 14:07:05\ncategories:\ntags:\n---\n","slug":"android-常见内存泄漏分析及解决方案","published":1,"updated":"2016-08-17T06:07:05.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjep000yqo8fbt9uf8vl","content":"","excerpt":"","more":""},{"title":"androdid-序列化对单例模式的破坏","date":"2016-08-17T01:54:02.000Z","_content":"# 一、 反序列化对Java单例的影响\n\n##### 解决方案：让Singleton继承Serializable, 并实现  private Object readResolve();\n    public class Singleton implement Serializable {\n\t \n\t \tpublic static class Builder {\n\t \t\tpublic static Singleton instance = new Singleton();\n\t \t}\n\t \t\n\t\tpublic static Singleton getInstance(){\n\t\t\treturn Builder.instance;\n\t\t}\n\t\t\n\t\tprivate Object readResolve(){\n\t\t\tretutn Builder.instance;\n\t\t}\n\t}\n\n##### 原理解析\n在反序列化时，ObjectInputStream 因为利用反射机制调用了 readObject --> readObject0 --> readOrdinary --> CheckResolve。在readOrdinady中调用了invokeReadResolve()，该方法使用反射机制创建新的对象，从而破坏了单例唯一性。\n###[尊重版权](http://www.hollischuang.com/archives/1144)\n\n\n\n\n####  二、 java单例模式的实现方式\n\n#####1. 饿汉式\n\tpublic class Singleton {\n\n    \tprivate static Singleton = new Singleton();\n\n    \tprivate Singleton() {}\n\n    \tpublic static getSignleton(){\n        \treturn singleton;\n    \t}\n\t}\n#####2. 懒汉式\n\tpublic class Singleton {\n\t\t//注意volatiile的用法: 1. 保证在当前线程修改临界值之后在随后线程中起作用（可见性），及线程透明\n\t\tvolatile的第二层语义是禁止指令重排序优化。\n   \t\tprivate static volatile Singleton singleton = null;\n \n    \tprivate Singleton(){}\n \n    \tpublic static Singleton getSingleton(){\n    \t\tif(singleton == null){}\n        \t\tsynchronized (Singleton.class){\n            \t\tif(singleton == null){\n                \t\tsingleton = new Singleton();\n            \t\t}\n       \t\t\t}\n       \t\t}\n\n        \treturn singleton;\n   \t\t }    \n \n\t}\n\n#####3. 静态内部类\n\tpublic class Singleton {\n\t\t//因为静态内部类只会加载一次，所以保证了线程安全\n\t    private static class Holder {\n\t        private static Singleton singleton = new Singleton();\n\t    }\n\t \n\t    private Singleton(){}\n\t \n\t    public static Singleton getSingleton(){\n\t        return Holder.singleton;\n\t    }\n\t}\n\n#####4. 枚举方式\n\n\tpublic enum Singleton {\n\t    INSTANCE;\n\t    private String name;\n\t    public String getName(){\n\t        return name;\n\t    }\n\t    public void setName(String name){\n\t        this.name = name;\n\t    }\n\t}\n\t\n\t使用枚举除了线程安全和防止反射强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。因此，Effective Java推荐尽可能地使用枚举来实现单例。","source":"_posts/android-序列化对单例模式的破坏.md","raw":"---\ntitle: androdid-序列化对单例模式的破坏\ndate: 2016-08-17 09:54:02\ncategories: android\ntags: [\"Android\", \"序列化与反序列化\", \"单例模式\"]\n---\n# 一、 反序列化对Java单例的影响\n\n##### 解决方案：让Singleton继承Serializable, 并实现  private Object readResolve();\n    public class Singleton implement Serializable {\n\t \n\t \tpublic static class Builder {\n\t \t\tpublic static Singleton instance = new Singleton();\n\t \t}\n\t \t\n\t\tpublic static Singleton getInstance(){\n\t\t\treturn Builder.instance;\n\t\t}\n\t\t\n\t\tprivate Object readResolve(){\n\t\t\tretutn Builder.instance;\n\t\t}\n\t}\n\n##### 原理解析\n在反序列化时，ObjectInputStream 因为利用反射机制调用了 readObject --> readObject0 --> readOrdinary --> CheckResolve。在readOrdinady中调用了invokeReadResolve()，该方法使用反射机制创建新的对象，从而破坏了单例唯一性。\n###[尊重版权](http://www.hollischuang.com/archives/1144)\n\n\n\n\n####  二、 java单例模式的实现方式\n\n#####1. 饿汉式\n\tpublic class Singleton {\n\n    \tprivate static Singleton = new Singleton();\n\n    \tprivate Singleton() {}\n\n    \tpublic static getSignleton(){\n        \treturn singleton;\n    \t}\n\t}\n#####2. 懒汉式\n\tpublic class Singleton {\n\t\t//注意volatiile的用法: 1. 保证在当前线程修改临界值之后在随后线程中起作用（可见性），及线程透明\n\t\tvolatile的第二层语义是禁止指令重排序优化。\n   \t\tprivate static volatile Singleton singleton = null;\n \n    \tprivate Singleton(){}\n \n    \tpublic static Singleton getSingleton(){\n    \t\tif(singleton == null){}\n        \t\tsynchronized (Singleton.class){\n            \t\tif(singleton == null){\n                \t\tsingleton = new Singleton();\n            \t\t}\n       \t\t\t}\n       \t\t}\n\n        \treturn singleton;\n   \t\t }    \n \n\t}\n\n#####3. 静态内部类\n\tpublic class Singleton {\n\t\t//因为静态内部类只会加载一次，所以保证了线程安全\n\t    private static class Holder {\n\t        private static Singleton singleton = new Singleton();\n\t    }\n\t \n\t    private Singleton(){}\n\t \n\t    public static Singleton getSingleton(){\n\t        return Holder.singleton;\n\t    }\n\t}\n\n#####4. 枚举方式\n\n\tpublic enum Singleton {\n\t    INSTANCE;\n\t    private String name;\n\t    public String getName(){\n\t        return name;\n\t    }\n\t    public void setName(String name){\n\t        this.name = name;\n\t    }\n\t}\n\t\n\t使用枚举除了线程安全和防止反射强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。因此，Effective Java推荐尽可能地使用枚举来实现单例。","slug":"android-序列化对单例模式的破坏","published":1,"updated":"2016-08-18T01:15:44.276Z","_id":"cirynnjer0010qo8fr1fjjntj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、-反序列化对Java单例的影响\"><a href=\"#一、-反序列化对Java单例的影响\" class=\"headerlink\" title=\"一、 反序列化对Java单例的影响\"></a>一、 反序列化对Java单例的影响</h1><h5 id=\"解决方案：让Singleton继承Serializable-并实现-private-Object-readResolve\"><a href=\"#解决方案：让Singleton继承Serializable-并实现-private-Object-readResolve\" class=\"headerlink\" title=\"解决方案：让Singleton继承Serializable, 并实现  private Object readResolve();\"></a>解决方案：让Singleton继承Serializable, 并实现  private Object readResolve();</h5><pre><code>public class Singleton implement Serializable {\n\n     public static class Builder {\n         public static Singleton instance = new Singleton();\n     }\n\n    public static Singleton getInstance(){\n        return Builder.instance;\n    }\n\n    private Object readResolve(){\n        retutn Builder.instance;\n    }\n}\n</code></pre><h5 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h5><p>在反序列化时，ObjectInputStream 因为利用反射机制调用了 readObject –&gt; readObject0 –&gt; readOrdinary –&gt; CheckResolve。在readOrdinady中调用了invokeReadResolve()，该方法使用反射机制创建新的对象，从而破坏了单例唯一性。</p>\n<p>###<a href=\"http://www.hollischuang.com/archives/1144\" target=\"_blank\" rel=\"external\">尊重版权</a></p>\n<h4 id=\"二、-java单例模式的实现方式\"><a href=\"#二、-java单例模式的实现方式\" class=\"headerlink\" title=\"二、 java单例模式的实现方式\"></a>二、 java单例模式的实现方式</h4><p>#####1. 饿汉式\n    public class Singleton {</p>\n<pre><code>    private static Singleton = new Singleton();\n\n    private Singleton() {}\n\n    public static getSignleton(){\n        return singleton;\n    }\n}\n</code></pre><p>#####2. 懒汉式\n    public class Singleton {\n        //注意volatiile的用法: 1. 保证在当前线程修改临界值之后在随后线程中起作用（可见性），及线程透明\n        volatile的第二层语义是禁止指令重排序优化。\n           private static volatile Singleton singleton = null;</p>\n<pre><code>    private Singleton(){}\n\n    public static Singleton getSingleton(){\n        if(singleton == null){}\n            synchronized (Singleton.class){\n                if(singleton == null){\n                    singleton = new Singleton();\n                }\n               }\n           }\n\n        return singleton;\n        }    \n\n}\n</code></pre><p>#####3. 静态内部类\n    public class Singleton {\n        //因为静态内部类只会加载一次，所以保证了线程安全\n        private static class Holder {\n            private static Singleton singleton = new Singleton();\n        }</p>\n<pre><code>    private Singleton(){}\n\n    public static Singleton getSingleton(){\n        return Holder.singleton;\n    }\n}\n</code></pre><p>#####4. 枚举方式</p>\n<pre><code>public enum Singleton {\n    INSTANCE;\n    private String name;\n    public String getName(){\n        return name;\n    }\n    public void setName(String name){\n        this.name = name;\n    }\n}\n\n使用枚举除了线程安全和防止反射强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。因此，Effective Java推荐尽可能地使用枚举来实现单例。\n</code></pre>","excerpt":"","more":"<h1 id=\"一、-反序列化对Java单例的影响\"><a href=\"#一、-反序列化对Java单例的影响\" class=\"headerlink\" title=\"一、 反序列化对Java单例的影响\"></a>一、 反序列化对Java单例的影响</h1><h5 id=\"解决方案：让Singleton继承Serializable-并实现-private-Object-readResolve\"><a href=\"#解决方案：让Singleton继承Serializable-并实现-private-Object-readResolve\" class=\"headerlink\" title=\"解决方案：让Singleton继承Serializable, 并实现  private Object readResolve();\"></a>解决方案：让Singleton继承Serializable, 并实现  private Object readResolve();</h5><pre><code>public class Singleton implement Serializable {\n\n     public static class Builder {\n         public static Singleton instance = new Singleton();\n     }\n\n    public static Singleton getInstance(){\n        return Builder.instance;\n    }\n\n    private Object readResolve(){\n        retutn Builder.instance;\n    }\n}\n</code></pre><h5 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h5><p>在反序列化时，ObjectInputStream 因为利用反射机制调用了 readObject –&gt; readObject0 –&gt; readOrdinary –&gt; CheckResolve。在readOrdinady中调用了invokeReadResolve()，该方法使用反射机制创建新的对象，从而破坏了单例唯一性。</p>\n<p>###<a href=\"http://www.hollischuang.com/archives/1144\">尊重版权</a></p>\n<h4 id=\"二、-java单例模式的实现方式\"><a href=\"#二、-java单例模式的实现方式\" class=\"headerlink\" title=\"二、 java单例模式的实现方式\"></a>二、 java单例模式的实现方式</h4><p>#####1. 饿汉式\n    public class Singleton {</p>\n<pre><code>    private static Singleton = new Singleton();\n\n    private Singleton() {}\n\n    public static getSignleton(){\n        return singleton;\n    }\n}\n</code></pre><p>#####2. 懒汉式\n    public class Singleton {\n        //注意volatiile的用法: 1. 保证在当前线程修改临界值之后在随后线程中起作用（可见性），及线程透明\n        volatile的第二层语义是禁止指令重排序优化。\n           private static volatile Singleton singleton = null;</p>\n<pre><code>    private Singleton(){}\n\n    public static Singleton getSingleton(){\n        if(singleton == null){}\n            synchronized (Singleton.class){\n                if(singleton == null){\n                    singleton = new Singleton();\n                }\n               }\n           }\n\n        return singleton;\n        }    \n\n}\n</code></pre><p>#####3. 静态内部类\n    public class Singleton {\n        //因为静态内部类只会加载一次，所以保证了线程安全\n        private static class Holder {\n            private static Singleton singleton = new Singleton();\n        }</p>\n<pre><code>    private Singleton(){}\n\n    public static Singleton getSingleton(){\n        return Holder.singleton;\n    }\n}\n</code></pre><p>#####4. 枚举方式</p>\n<pre><code>public enum Singleton {\n    INSTANCE;\n    private String name;\n    public String getName(){\n        return name;\n    }\n    public void setName(String name){\n        this.name = name;\n    }\n}\n\n使用枚举除了线程安全和防止反射强行调用构造器之外，还提供了自动序列化机制，防止反序列化的时候创建新的对象。因此，Effective Java推荐尽可能地使用枚举来实现单例。\n</code></pre>"},{"title":"androdid-适配","date":"2016-08-17T01:53:44.000Z","_content":"# androdid-适配\n由于android屏幕的多样性，关于尺寸、屏幕大小等就有一系列的属性和单位来保证应用程序在各个机型上的适配:\n## 1. 单位:\n1. px\n2. dp：设备无关的尺寸单位\n3. dip：同dp\n4. sp:文字的大小，sp = px * scaledDensity, scaledDensity是用户在系统设置里设置的文字缩放比例。\n5. dpi:dot per inch, 称为屏幕像素密度，指每英寸上的像素点数。\n6. density:px/dp\n7. ppi:同dpi, pixel per inch.\n\n## 2. 属性\n1. 屏幕宽度：屏幕横向的像素点数，单位px\n2. 屏幕高度：屏幕纵向的像素点数，单位px\n3. 屏幕尺寸：屏幕对角线的长度，单位为英寸，1 inch = 2.54cm\n4. 屏幕分辨率：屏幕横纵方向的像素点数，单位为px， 1px = 1像素点。例如1920 * 1080\n5. 屏幕像素密度：指每英寸上的像素点数，即dot per inch $$屏幕像素密度 = 屏幕分辨率 / 屏幕尺寸$$屏幕像素密度一般分为ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi这6种类型，他们与屏幕像素密度大小的对象关系如下表：\n6. 缩放比例：scaledDensity,用户设置的文字缩放比例\n\n|名称|像素密度大小(px/inch)|\n| -------- | --------- |\n|ldpi (DENSITY_LOW)|<120|\n|mdpi (DENSITY_MEDIUM)|120-160|\n|hdpi (DENSITY_HIGH)|160-240|\n|xhdpi|240-320|\n|xxhdpi|320-480|\n|xxxhdpi|480-640|\n\n从上表我们可以看出： mdpi:hdpi:xhdpi:xxhdpi:xxxhdpi = 3:4:6:8:12\n\n以上所有的信息均可在DisplayMetrics类中查询到，具体用法如下:\n```\n    /**\n     * dip/dp 转 px\n     *\n     * @param context  Context\n     * @param dipValue dip/dp value\n     * @return the px value\n     */\n    public static int dip2px(Context context, float dipValue) {\n        final float density = context.getResources().getDisplayMetrics().density;\n        Log.i(TAG, \"dip2px_density = \" + density);\n        return (int) (dipValue * density + 0.5f);\n    }\n\n    /**\n     * px转dip/dp\n     *\n     * @param context context\n     * @param pxValue px\n     * @return\n     */\n    public static int px2dip(Context context, float pxValue) {\n        final float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (pxValue / scale + 0.5f);\n    }\n    \n    /**\n     * 将px值转换为sp值\n     *\n     * @param pxValue px\n     * @return sp\n     */\n    public static int px2sp(Context context, float pxValue) {\n        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (pxValue / fontScale + 0.5f);\n    }\n\n    /**\n     * 将sp值转换为px值\n     *\n     * @param context context\n     * @param spValue （DisplayMetrics类中属性scaledDensity）\n     * @return\n     */\n    public static int sp2px(Context context, float spValue) {\n        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (spValue * fontScale + 0.5f);\n    }\n    \n    /**\n     * 获取屏幕宽度\n     *\n     * @param context context\n     * @return 屏幕宽度，单位px\n     */\n    public static int getDisplayWidthPixels(Context context) {\n        if (context == null) {\n            return -1;\n        }\n        DisplayMetrics dm = context.getResources().getDisplayMetrics();\n        return dm.widthPixels;\n    }\n    \n    /**\n     * 获取屏幕高度\n     *\n     * @param context context\n     * @return 屏幕高度，单位px\n     */\n    public static int getDisplayWidthPixels(Context context) {\n        if (context == null) {\n            return -1;\n        }\n        DisplayMetrics dm = context.getResources().getDisplayMetrics();\n        return dm.heightPixels;\n    }\n    \n    /**\n     *  获取手机状态栏高度\n     * @param context context\n     * @return  手机状态栏高度\n     */\n    public static int getStatusBarHeight(Context context) {\n        Class<?> c = null;\n        Object obj = null;\n        Field field = null;\n        int x = 0, statusBarHeight = 0;\n        try {\n            c = Class.forName(\"com.android.internal.R$dimen\");\n            obj = c.newInstance();\n            field = c.getField(\"status_bar_height\");\n            x = Integer.parseInt(field.get(obj).toString());\n            statusBarHeight = context.getResources().getDimensionPixelSize(x);\n        } catch (Exception e1) {\n            e1.printStackTrace();\n        }\n        return statusBarHeight;\n    }\n\n    /**\n     * 获取ActionBar的高度\n     * @param context context\n     * @return ActionBar的高度\n     */\n    public static int getActionBarHeight(Context context) {\n        TypedValue tv = new TypedValue();\n        int actionBarHeight = 0;\n        if (context.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true))// 如果资源是存在的、有效的\n        {\n            actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, context.getResources().getDisplayMetrics());\n        }\n        return actionBarHeight;\n    }\n\n    /**\n     * 获取NavigationBar的高度\n     * @param context  context\n     * @return NavigationBar的高度\n     */\n    public static int getNavigationBarHeight(Context context) {\n        Resources resources = context.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        //获取NavigationBar的高度\n        return resources.getDimensionPixelSize(resourceId);\n    }\n```\n\n现在我们回头想想，一张640 * 640的图片在不同dpi的屏幕上显示的大小可能是不一样的，例如在mdpi显示为 640/120 = 5.3inch,在hdpi的屏幕上显示为640/24=2.67inch。所以为了保证在各种不同dpi的屏幕上，同一张图片显示的大小尽可能相同，我们需要针对不同dpi的屏幕提供不同大小的图片。例如ic_launcher这张图片：在mdpi~xxxhdpi中大小依次为 36、48、72、96、144px。\n\n## 限定符及其使用\n### 限定符的类型\n#### 1. large限定符\n现在很多应用在平板上都支持双面板模式，左边为选项列表，右侧为选项内容，但在手机上就无法容纳这种双面板模式，需要分别显示。在这种情况下我们就可以使用large限定符来动态选择布局。系统默认情况下，将7英寸及以上的手机及平板当做large来处理。\n\n>res/**layout**/main.xml，单面板（默认）布局：\n\n```\n\n\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:orientation=\"vertical\"\n    \tandroid:layout_width=\"match_parent\"\n    \tandroid:layout_height=\"match_parent\">\n\n    \t<fragment android:id=\"@+id/headlines\"\n              android:layout_height=\"fill_parent\"\n              android:name=\"com.example.MenuFragment\"\n              android:layout_width=\"match_parent\" />\n\t</LinearLayout>\n\n```\n\n>res/**layout-large**/main.xml,双面板模式布局：\n\n```\n\n\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:layout_width=\"fill_parent\"\n    \tandroid:layout_height=\"fill_parent\"\n    \tandroid:orientation=\"horizontal\">\n    \t\n    \t<fragment android:id=\"@+id/headlines\"\n              android:layout_height=\"fill_parent\"\n              android:name=\"com.example.MenuFragment\"\n              android:layout_width=\"400dp\"\n              android:layout_marginRight=\"10dp\"/>\n    \t<fragment android:id=\"@+id/article\"\n              android:layout_height=\"fill_parent\"\n              android:name=\"com.example.MenuDetailFragment\"\n              android:layout_width=\"fill_parent\" />\n\t</LinearLayout>\n\n```\n但是仅仅使用large限定符，是没有办法来做到精准的适配。例如因为某些特殊的需求需要在5寸，7寸，12寸等大小的手机上以不同的方式显示某些内容，此时large就无法满足需求了。最小宽度限定符就是用来解决解决上述问题的。\n#### 2. 最先宽度限定符:swXXdp\n最小宽度限定度通过指定某个最小宽度来限定屏幕（以dp为单位）。比如标准7英寸的平板为600dp。\n\n**注意：swXXdp仅适用的android3.2及以上机型。**\n>res/layout/main.xml\n>\n>res/layout-sw600dp/main.xml\n#### 3. 布局别名\n最小宽度限定符仅适用于 Android 3.2 及更高版本。因此，如果我们仍需使用与较低版本兼容的概括尺寸范围（小、正常、大和特大）。例如，如果要将用户界面设计成在手机上显示单面板，但在 6 英寸平板电脑、电视和其他较大的设备上显示多面板，那么我们就需要提供以下文件：\n\n>* res/**layout**/main.xml: 单面板布局 //Normal\n>* res/**layout-large**/main.xml: 多面板布局   //适用于large，低于android3.2的情况\n>* res/**layout-sw600dp**/mail.xml: 多面板布局 //适用于android3.2且sw600dp情况\n\n后两个文件是相同的，因为其中sw600dp用于和 Android 3.2 设备匹配，而large则是为使用较低版本 Android 的平板电脑和电视准备的。\n\n要避免平板电脑和电视的文件出现重复，可以使用别名文件。例如，可以定义以下布局：\n>* res/layout/main.xml，单面板布局\n>* res/layout/main_twopanes.xml，双面板布局\n\n然后添加这两个文件：\n\n>res/**values-large**/layout.xml:\n\n\n```\n\n\t<resources>\n    \t<item name=\"main\" type=\"layout\">@layout/main_twopanes</item>\n\t</resources>\n```\n\n>res/**values-sw600dp**/layout.xml:\n\n```\n\n\t<resources>\n    \t<item name=\"main\" type=\"layout\">@layout/main_twopanes</item>\n\t</resources>\n```\n\n#### 4. 使用屏幕方向限定符\n>* res/layout-land/mail.xml\n>* res/layout-port/main.xml\n\n#### 5. 各式各样的限定度使用举例\n#####别名\n>* res/values-sw600dp-land/layout.xml\n>* res/values-large-land/layout.xml\n>* res/values-large-port/layout.xml\n\n## 9Patch图片\n只需要记得左上限制缩放区域，右下限制显示区域","source":"_posts/android-适配.md","raw":"---\ntitle: androdid-适配\ndate: 2016-08-17 09:53:44\ncategories: \"android\"\ntags: [\"android\", \"屏幕适配\", \"限定符\"]\n---\n# androdid-适配\n由于android屏幕的多样性，关于尺寸、屏幕大小等就有一系列的属性和单位来保证应用程序在各个机型上的适配:\n## 1. 单位:\n1. px\n2. dp：设备无关的尺寸单位\n3. dip：同dp\n4. sp:文字的大小，sp = px * scaledDensity, scaledDensity是用户在系统设置里设置的文字缩放比例。\n5. dpi:dot per inch, 称为屏幕像素密度，指每英寸上的像素点数。\n6. density:px/dp\n7. ppi:同dpi, pixel per inch.\n\n## 2. 属性\n1. 屏幕宽度：屏幕横向的像素点数，单位px\n2. 屏幕高度：屏幕纵向的像素点数，单位px\n3. 屏幕尺寸：屏幕对角线的长度，单位为英寸，1 inch = 2.54cm\n4. 屏幕分辨率：屏幕横纵方向的像素点数，单位为px， 1px = 1像素点。例如1920 * 1080\n5. 屏幕像素密度：指每英寸上的像素点数，即dot per inch $$屏幕像素密度 = 屏幕分辨率 / 屏幕尺寸$$屏幕像素密度一般分为ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi这6种类型，他们与屏幕像素密度大小的对象关系如下表：\n6. 缩放比例：scaledDensity,用户设置的文字缩放比例\n\n|名称|像素密度大小(px/inch)|\n| -------- | --------- |\n|ldpi (DENSITY_LOW)|<120|\n|mdpi (DENSITY_MEDIUM)|120-160|\n|hdpi (DENSITY_HIGH)|160-240|\n|xhdpi|240-320|\n|xxhdpi|320-480|\n|xxxhdpi|480-640|\n\n从上表我们可以看出： mdpi:hdpi:xhdpi:xxhdpi:xxxhdpi = 3:4:6:8:12\n\n以上所有的信息均可在DisplayMetrics类中查询到，具体用法如下:\n```\n    /**\n     * dip/dp 转 px\n     *\n     * @param context  Context\n     * @param dipValue dip/dp value\n     * @return the px value\n     */\n    public static int dip2px(Context context, float dipValue) {\n        final float density = context.getResources().getDisplayMetrics().density;\n        Log.i(TAG, \"dip2px_density = \" + density);\n        return (int) (dipValue * density + 0.5f);\n    }\n\n    /**\n     * px转dip/dp\n     *\n     * @param context context\n     * @param pxValue px\n     * @return\n     */\n    public static int px2dip(Context context, float pxValue) {\n        final float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (pxValue / scale + 0.5f);\n    }\n    \n    /**\n     * 将px值转换为sp值\n     *\n     * @param pxValue px\n     * @return sp\n     */\n    public static int px2sp(Context context, float pxValue) {\n        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (pxValue / fontScale + 0.5f);\n    }\n\n    /**\n     * 将sp值转换为px值\n     *\n     * @param context context\n     * @param spValue （DisplayMetrics类中属性scaledDensity）\n     * @return\n     */\n    public static int sp2px(Context context, float spValue) {\n        final float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (spValue * fontScale + 0.5f);\n    }\n    \n    /**\n     * 获取屏幕宽度\n     *\n     * @param context context\n     * @return 屏幕宽度，单位px\n     */\n    public static int getDisplayWidthPixels(Context context) {\n        if (context == null) {\n            return -1;\n        }\n        DisplayMetrics dm = context.getResources().getDisplayMetrics();\n        return dm.widthPixels;\n    }\n    \n    /**\n     * 获取屏幕高度\n     *\n     * @param context context\n     * @return 屏幕高度，单位px\n     */\n    public static int getDisplayWidthPixels(Context context) {\n        if (context == null) {\n            return -1;\n        }\n        DisplayMetrics dm = context.getResources().getDisplayMetrics();\n        return dm.heightPixels;\n    }\n    \n    /**\n     *  获取手机状态栏高度\n     * @param context context\n     * @return  手机状态栏高度\n     */\n    public static int getStatusBarHeight(Context context) {\n        Class<?> c = null;\n        Object obj = null;\n        Field field = null;\n        int x = 0, statusBarHeight = 0;\n        try {\n            c = Class.forName(\"com.android.internal.R$dimen\");\n            obj = c.newInstance();\n            field = c.getField(\"status_bar_height\");\n            x = Integer.parseInt(field.get(obj).toString());\n            statusBarHeight = context.getResources().getDimensionPixelSize(x);\n        } catch (Exception e1) {\n            e1.printStackTrace();\n        }\n        return statusBarHeight;\n    }\n\n    /**\n     * 获取ActionBar的高度\n     * @param context context\n     * @return ActionBar的高度\n     */\n    public static int getActionBarHeight(Context context) {\n        TypedValue tv = new TypedValue();\n        int actionBarHeight = 0;\n        if (context.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, true))// 如果资源是存在的、有效的\n        {\n            actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, context.getResources().getDisplayMetrics());\n        }\n        return actionBarHeight;\n    }\n\n    /**\n     * 获取NavigationBar的高度\n     * @param context  context\n     * @return NavigationBar的高度\n     */\n    public static int getNavigationBarHeight(Context context) {\n        Resources resources = context.getResources();\n        int resourceId = resources.getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\n        //获取NavigationBar的高度\n        return resources.getDimensionPixelSize(resourceId);\n    }\n```\n\n现在我们回头想想，一张640 * 640的图片在不同dpi的屏幕上显示的大小可能是不一样的，例如在mdpi显示为 640/120 = 5.3inch,在hdpi的屏幕上显示为640/24=2.67inch。所以为了保证在各种不同dpi的屏幕上，同一张图片显示的大小尽可能相同，我们需要针对不同dpi的屏幕提供不同大小的图片。例如ic_launcher这张图片：在mdpi~xxxhdpi中大小依次为 36、48、72、96、144px。\n\n## 限定符及其使用\n### 限定符的类型\n#### 1. large限定符\n现在很多应用在平板上都支持双面板模式，左边为选项列表，右侧为选项内容，但在手机上就无法容纳这种双面板模式，需要分别显示。在这种情况下我们就可以使用large限定符来动态选择布局。系统默认情况下，将7英寸及以上的手机及平板当做large来处理。\n\n>res/**layout**/main.xml，单面板（默认）布局：\n\n```\n\n\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:orientation=\"vertical\"\n    \tandroid:layout_width=\"match_parent\"\n    \tandroid:layout_height=\"match_parent\">\n\n    \t<fragment android:id=\"@+id/headlines\"\n              android:layout_height=\"fill_parent\"\n              android:name=\"com.example.MenuFragment\"\n              android:layout_width=\"match_parent\" />\n\t</LinearLayout>\n\n```\n\n>res/**layout-large**/main.xml,双面板模式布局：\n\n```\n\n\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \tandroid:layout_width=\"fill_parent\"\n    \tandroid:layout_height=\"fill_parent\"\n    \tandroid:orientation=\"horizontal\">\n    \t\n    \t<fragment android:id=\"@+id/headlines\"\n              android:layout_height=\"fill_parent\"\n              android:name=\"com.example.MenuFragment\"\n              android:layout_width=\"400dp\"\n              android:layout_marginRight=\"10dp\"/>\n    \t<fragment android:id=\"@+id/article\"\n              android:layout_height=\"fill_parent\"\n              android:name=\"com.example.MenuDetailFragment\"\n              android:layout_width=\"fill_parent\" />\n\t</LinearLayout>\n\n```\n但是仅仅使用large限定符，是没有办法来做到精准的适配。例如因为某些特殊的需求需要在5寸，7寸，12寸等大小的手机上以不同的方式显示某些内容，此时large就无法满足需求了。最小宽度限定符就是用来解决解决上述问题的。\n#### 2. 最先宽度限定符:swXXdp\n最小宽度限定度通过指定某个最小宽度来限定屏幕（以dp为单位）。比如标准7英寸的平板为600dp。\n\n**注意：swXXdp仅适用的android3.2及以上机型。**\n>res/layout/main.xml\n>\n>res/layout-sw600dp/main.xml\n#### 3. 布局别名\n最小宽度限定符仅适用于 Android 3.2 及更高版本。因此，如果我们仍需使用与较低版本兼容的概括尺寸范围（小、正常、大和特大）。例如，如果要将用户界面设计成在手机上显示单面板，但在 6 英寸平板电脑、电视和其他较大的设备上显示多面板，那么我们就需要提供以下文件：\n\n>* res/**layout**/main.xml: 单面板布局 //Normal\n>* res/**layout-large**/main.xml: 多面板布局   //适用于large，低于android3.2的情况\n>* res/**layout-sw600dp**/mail.xml: 多面板布局 //适用于android3.2且sw600dp情况\n\n后两个文件是相同的，因为其中sw600dp用于和 Android 3.2 设备匹配，而large则是为使用较低版本 Android 的平板电脑和电视准备的。\n\n要避免平板电脑和电视的文件出现重复，可以使用别名文件。例如，可以定义以下布局：\n>* res/layout/main.xml，单面板布局\n>* res/layout/main_twopanes.xml，双面板布局\n\n然后添加这两个文件：\n\n>res/**values-large**/layout.xml:\n\n\n```\n\n\t<resources>\n    \t<item name=\"main\" type=\"layout\">@layout/main_twopanes</item>\n\t</resources>\n```\n\n>res/**values-sw600dp**/layout.xml:\n\n```\n\n\t<resources>\n    \t<item name=\"main\" type=\"layout\">@layout/main_twopanes</item>\n\t</resources>\n```\n\n#### 4. 使用屏幕方向限定符\n>* res/layout-land/mail.xml\n>* res/layout-port/main.xml\n\n#### 5. 各式各样的限定度使用举例\n#####别名\n>* res/values-sw600dp-land/layout.xml\n>* res/values-large-land/layout.xml\n>* res/values-large-port/layout.xml\n\n## 9Patch图片\n只需要记得左上限制缩放区域，右下限制显示区域","slug":"android-适配","published":1,"updated":"2016-08-17T08:46:08.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cirynnjka0015qo8fset9fy8k","content":"<h1 id=\"androdid-适配\"><a href=\"#androdid-适配\" class=\"headerlink\" title=\"androdid-适配\"></a>androdid-适配</h1><p>由于android屏幕的多样性，关于尺寸、屏幕大小等就有一系列的属性和单位来保证应用程序在各个机型上的适配:</p>\n<h2 id=\"1-单位\"><a href=\"#1-单位\" class=\"headerlink\" title=\"1. 单位:\"></a>1. 单位:</h2><ol>\n<li>px</li>\n<li>dp：设备无关的尺寸单位</li>\n<li>dip：同dp</li>\n<li>sp:文字的大小，sp = px * scaledDensity, scaledDensity是用户在系统设置里设置的文字缩放比例。</li>\n<li>dpi:dot per inch, 称为屏幕像素密度，指每英寸上的像素点数。</li>\n<li>density:px/dp</li>\n<li>ppi:同dpi, pixel per inch.</li>\n</ol>\n<h2 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2. 属性\"></a>2. 属性</h2><ol>\n<li>屏幕宽度：屏幕横向的像素点数，单位px</li>\n<li>屏幕高度：屏幕纵向的像素点数，单位px</li>\n<li>屏幕尺寸：屏幕对角线的长度，单位为英寸，1 inch = 2.54cm</li>\n<li>屏幕分辨率：屏幕横纵方向的像素点数，单位为px， 1px = 1像素点。例如1920 * 1080</li>\n<li>屏幕像素密度：指每英寸上的像素点数，即dot per inch $$屏幕像素密度 = 屏幕分辨率 / 屏幕尺寸$$屏幕像素密度一般分为ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi这6种类型，他们与屏幕像素密度大小的对象关系如下表：</li>\n<li>缩放比例：scaledDensity,用户设置的文字缩放比例</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>像素密度大小(px/inch)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ldpi (DENSITY_LOW)</td>\n<td>&lt;120</td>\n</tr>\n<tr>\n<td>mdpi (DENSITY_MEDIUM)</td>\n<td>120-160</td>\n</tr>\n<tr>\n<td>hdpi (DENSITY_HIGH)</td>\n<td>160-240</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>240-320</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>320-480</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>480-640</td>\n</tr>\n</tbody>\n</table>\n<p>从上表我们可以看出： mdpi:hdpi:xhdpi:xxhdpi:xxxhdpi = 3:4:6:8:12</p>\n<p>以上所有的信息均可在DisplayMetrics类中查询到，具体用法如下:\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * dip/dp 转 px</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context  Context</div><div class=\"line\"> * <span class=\"doctag\">@param</span> dipValue dip/dp value</div><div class=\"line\"> * <span class=\"doctag\">@return</span> the px value</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dip2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> dipValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> density = context.getResources().getDisplayMetrics().density;</div><div class=\"line\">    Log.i(TAG, <span class=\"string\">\"dip2px_density = \"</span> + density);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (dipValue * density + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * px转dip/dp</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@param</span> pxValue px</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">px2dip</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> scale = context.getResources().getDisplayMetrics().density;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / scale + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 将px值转换为sp值</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> pxValue px</div><div class=\"line\"> * <span class=\"doctag\">@return</span> sp</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">px2sp</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / fontScale + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 将sp值转换为px值</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@param</span> spValue （DisplayMetrics类中属性scaledDensity）</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sp2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> spValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (spValue * fontScale + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取屏幕宽度</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 屏幕宽度，单位px</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDisplayWidthPixels</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    DisplayMetrics dm = context.getResources().getDisplayMetrics();</div><div class=\"line\">    <span class=\"keyword\">return</span> dm.widthPixels;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取屏幕高度</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 屏幕高度，单位px</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDisplayWidthPixels</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    DisplayMetrics dm = context.getResources().getDisplayMetrics();</div><div class=\"line\">    <span class=\"keyword\">return</span> dm.heightPixels;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  获取手机状态栏高度</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  手机状态栏高度</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStatusBarHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Object obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Field field = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, statusBarHeight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        c = Class.forName(<span class=\"string\">\"com.android.internal.R$dimen\"</span>);</div><div class=\"line\">        obj = c.newInstance();</div><div class=\"line\">        field = c.getField(<span class=\"string\">\"status_bar_height\"</span>);</div><div class=\"line\">        x = Integer.parseInt(field.get(obj).toString());</div><div class=\"line\">        statusBarHeight = context.getResources().getDimensionPixelSize(x);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</div><div class=\"line\">        e1.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> statusBarHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取ActionBar的高度</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> ActionBar的高度</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getActionBarHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    TypedValue tv = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">    <span class=\"keyword\">int</span> actionBarHeight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, <span class=\"keyword\">true</span>))<span class=\"comment\">// 如果资源是存在的、有效的</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, context.getResources().getDisplayMetrics());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> actionBarHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 获取NavigationBar的高度</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context  context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> NavigationBar的高度</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getNavigationBarHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    Resources resources = context.getResources();</div><div class=\"line\">    <span class=\"keyword\">int</span> resourceId = resources.getIdentifier(<span class=\"string\">\"navigation_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</div><div class=\"line\">    <span class=\"comment\">//获取NavigationBar的高度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> resources.<span class=\"title\">getDimensionPixelSize</span><span class=\"params\">(resourceId)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在我们回头想想，一张640 * 640的图片在不同dpi的屏幕上显示的大小可能是不一样的，例如在mdpi显示为 640/120 = 5.3inch,在hdpi的屏幕上显示为640/24=2.67inch。所以为了保证在各种不同dpi的屏幕上，同一张图片显示的大小尽可能相同，我们需要针对不同dpi的屏幕提供不同大小的图片。例如ic_launcher这张图片：在mdpi~xxxhdpi中大小依次为 36、48、72、96、144px。</p>\n<h2 id=\"限定符及其使用\"><a href=\"#限定符及其使用\" class=\"headerlink\" title=\"限定符及其使用\"></a>限定符及其使用</h2><h3 id=\"限定符的类型\"><a href=\"#限定符的类型\" class=\"headerlink\" title=\"限定符的类型\"></a>限定符的类型</h3><h4 id=\"1-large限定符\"><a href=\"#1-large限定符\" class=\"headerlink\" title=\"1. large限定符\"></a>1. large限定符</h4><p>现在很多应用在平板上都支持双面板模式，左边为选项列表，右侧为选项内容，但在手机上就无法容纳这种双面板模式，需要分别显示。在这种情况下我们就可以使用large限定符来动态选择布局。系统默认情况下，将7英寸及以上的手机及平板当做large来处理。</p>\n<blockquote>\n<p>res/<strong>layout</strong>/main.xml，单面板（默认）布局：</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">   \t<span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">   \t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">   \t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/headlines\"</span></span></div><div class=\"line\">             <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">             <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.MenuFragment\"</span></div><div class=\"line\">             <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>res/<strong>layout-large</strong>/main.xml,双面板模式布局：</p>\n</blockquote>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">   \tandroid:layout_width=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">   \tandroid:layout_height=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">   \tandroid:orientation=<span class=\"string\">\"horizontal\"</span>&gt;</div><div class=\"line\">   \t</div><div class=\"line\">   \t&lt;fragment android:<span class=\"built_in\">id</span>=<span class=\"string\">\"@+id/headlines\"</span></div><div class=\"line\">             android:layout_height=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">             android:<span class=\"built_in\">name</span>=<span class=\"string\">\"com.example.MenuFragment\"</span></div><div class=\"line\">             android:layout_width=<span class=\"string\">\"400dp\"</span></div><div class=\"line\">             android:layout_marginRight=<span class=\"string\">\"10dp\"</span>/&gt;</div><div class=\"line\">   \t&lt;fragment android:<span class=\"built_in\">id</span>=<span class=\"string\">\"@+id/article\"</span></div><div class=\"line\">             android:layout_height=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">             android:<span class=\"built_in\">name</span>=<span class=\"string\">\"com.example.MenuDetailFragment\"</span></div><div class=\"line\">             android:layout_width=<span class=\"string\">\"fill_parent\"</span> /&gt;</div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>\n<p>但是仅仅使用large限定符，是没有办法来做到精准的适配。例如因为某些特殊的需求需要在5寸，7寸，12寸等大小的手机上以不同的方式显示某些内容，此时large就无法满足需求了。最小宽度限定符就是用来解决解决上述问题的。</p>\n<h4 id=\"2-最先宽度限定符-swXXdp\"><a href=\"#2-最先宽度限定符-swXXdp\" class=\"headerlink\" title=\"2. 最先宽度限定符:swXXdp\"></a>2. 最先宽度限定符:swXXdp</h4><p>最小宽度限定度通过指定某个最小宽度来限定屏幕（以dp为单位）。比如标准7英寸的平板为600dp。</p>\n<p><strong>注意：swXXdp仅适用的android3.2及以上机型。</strong></p>\n<blockquote>\n<p>res/layout/main.xml</p>\n<p>res/layout-sw600dp/main.xml</p>\n<h4 id=\"3-布局别名\"><a href=\"#3-布局别名\" class=\"headerlink\" title=\"3. 布局别名\"></a>3. 布局别名</h4><p>最小宽度限定符仅适用于 Android 3.2 及更高版本。因此，如果我们仍需使用与较低版本兼容的概括尺寸范围（小、正常、大和特大）。例如，如果要将用户界面设计成在手机上显示单面板，但在 6 英寸平板电脑、电视和其他较大的设备上显示多面板，那么我们就需要提供以下文件：</p>\n<ul>\n<li>res/<strong>layout</strong>/main.xml: 单面板布局 //Normal</li>\n<li>res/<strong>layout-large</strong>/main.xml: 多面板布局   //适用于large，低于android3.2的情况</li>\n<li>res/<strong>layout-sw600dp</strong>/mail.xml: 多面板布局 //适用于android3.2且sw600dp情况</li>\n</ul>\n</blockquote>\n<p>后两个文件是相同的，因为其中sw600dp用于和 Android 3.2 设备匹配，而large则是为使用较低版本 Android 的平板电脑和电视准备的。</p>\n<p>要避免平板电脑和电视的文件出现重复，可以使用别名文件。例如，可以定义以下布局：</p>\n<blockquote>\n<ul>\n<li>res/layout/main.xml，单面板布局</li>\n<li>res/layout/main_twopanes.xml，双面板布局</li>\n</ul>\n</blockquote>\n<p>然后添加这两个文件：</p>\n<blockquote>\n<p>res/<strong>values-large</strong>/layout.xml:</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"layout\"</span>&gt;</span>@layout/main_twopanes<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>res/<strong>values-sw600dp</strong>/layout.xml:</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"layout\"</span>&gt;</span>@layout/main_twopanes<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-使用屏幕方向限定符\"><a href=\"#4-使用屏幕方向限定符\" class=\"headerlink\" title=\"4. 使用屏幕方向限定符\"></a>4. 使用屏幕方向限定符</h4><blockquote>\n<ul>\n<li>res/layout-land/mail.xml</li>\n<li>res/layout-port/main.xml</li>\n</ul>\n</blockquote>\n<h4 id=\"5-各式各样的限定度使用举例\"><a href=\"#5-各式各样的限定度使用举例\" class=\"headerlink\" title=\"5. 各式各样的限定度使用举例\"></a>5. 各式各样的限定度使用举例</h4><p>#####别名</p>\n<blockquote>\n<ul>\n<li>res/values-sw600dp-land/layout.xml</li>\n<li>res/values-large-land/layout.xml</li>\n<li>res/values-large-port/layout.xml</li>\n</ul>\n</blockquote>\n<h2 id=\"9Patch图片\"><a href=\"#9Patch图片\" class=\"headerlink\" title=\"9Patch图片\"></a>9Patch图片</h2><p>只需要记得左上限制缩放区域，右下限制显示区域</p>\n","excerpt":"","more":"<h1 id=\"androdid-适配\"><a href=\"#androdid-适配\" class=\"headerlink\" title=\"androdid-适配\"></a>androdid-适配</h1><p>由于android屏幕的多样性，关于尺寸、屏幕大小等就有一系列的属性和单位来保证应用程序在各个机型上的适配:</p>\n<h2 id=\"1-单位\"><a href=\"#1-单位\" class=\"headerlink\" title=\"1. 单位:\"></a>1. 单位:</h2><ol>\n<li>px</li>\n<li>dp：设备无关的尺寸单位</li>\n<li>dip：同dp</li>\n<li>sp:文字的大小，sp = px * scaledDensity, scaledDensity是用户在系统设置里设置的文字缩放比例。</li>\n<li>dpi:dot per inch, 称为屏幕像素密度，指每英寸上的像素点数。</li>\n<li>density:px/dp</li>\n<li>ppi:同dpi, pixel per inch.</li>\n</ol>\n<h2 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2. 属性\"></a>2. 属性</h2><ol>\n<li>屏幕宽度：屏幕横向的像素点数，单位px</li>\n<li>屏幕高度：屏幕纵向的像素点数，单位px</li>\n<li>屏幕尺寸：屏幕对角线的长度，单位为英寸，1 inch = 2.54cm</li>\n<li>屏幕分辨率：屏幕横纵方向的像素点数，单位为px， 1px = 1像素点。例如1920 * 1080</li>\n<li>屏幕像素密度：指每英寸上的像素点数，即dot per inch $$屏幕像素密度 = 屏幕分辨率 / 屏幕尺寸$$屏幕像素密度一般分为ldpi, mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi这6种类型，他们与屏幕像素密度大小的对象关系如下表：</li>\n<li>缩放比例：scaledDensity,用户设置的文字缩放比例</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>像素密度大小(px/inch)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ldpi (DENSITY_LOW)</td>\n<td>&lt;120</td>\n</tr>\n<tr>\n<td>mdpi (DENSITY_MEDIUM)</td>\n<td>120-160</td>\n</tr>\n<tr>\n<td>hdpi (DENSITY_HIGH)</td>\n<td>160-240</td>\n</tr>\n<tr>\n<td>xhdpi</td>\n<td>240-320</td>\n</tr>\n<tr>\n<td>xxhdpi</td>\n<td>320-480</td>\n</tr>\n<tr>\n<td>xxxhdpi</td>\n<td>480-640</td>\n</tr>\n</tbody>\n</table>\n<p>从上表我们可以看出： mdpi:hdpi:xhdpi:xxhdpi:xxxhdpi = 3:4:6:8:12</p>\n<p>以上所有的信息均可在DisplayMetrics类中查询到，具体用法如下:\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * dip/dp 转 px</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context  Context</div><div class=\"line\"> * <span class=\"doctag\">@param</span> dipValue dip/dp value</div><div class=\"line\"> * <span class=\"doctag\">@return</span> the px value</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dip2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> dipValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> density = context.getResources().getDisplayMetrics().density;</div><div class=\"line\">    Log.i(TAG, <span class=\"string\">\"dip2px_density = \"</span> + density);</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (dipValue * density + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * px转dip/dp</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@param</span> pxValue px</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">px2dip</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> scale = context.getResources().getDisplayMetrics().density;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / scale + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 将px值转换为sp值</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> pxValue px</div><div class=\"line\"> * <span class=\"doctag\">@return</span> sp</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">px2sp</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / fontScale + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 将sp值转换为px值</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@param</span> spValue （DisplayMetrics类中属性scaledDensity）</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sp2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> spValue)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (spValue * fontScale + <span class=\"number\">0.5</span>f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取屏幕宽度</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 屏幕宽度，单位px</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDisplayWidthPixels</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    DisplayMetrics dm = context.getResources().getDisplayMetrics();</div><div class=\"line\">    <span class=\"keyword\">return</span> dm.widthPixels;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取屏幕高度</div><div class=\"line\"> *</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> 屏幕高度，单位px</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getDisplayWidthPixels</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    DisplayMetrics dm = context.getResources().getDisplayMetrics();</div><div class=\"line\">    <span class=\"keyword\">return</span> dm.heightPixels;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  获取手机状态栏高度</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span>  手机状态栏高度</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getStatusBarHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    Class&lt;?&gt; c = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Object obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Field field = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, statusBarHeight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        c = Class.forName(<span class=\"string\">\"com.android.internal.R$dimen\"</span>);</div><div class=\"line\">        obj = c.newInstance();</div><div class=\"line\">        field = c.getField(<span class=\"string\">\"status_bar_height\"</span>);</div><div class=\"line\">        x = Integer.parseInt(field.get(obj).toString());</div><div class=\"line\">        statusBarHeight = context.getResources().getDimensionPixelSize(x);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;</div><div class=\"line\">        e1.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> statusBarHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取ActionBar的高度</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> ActionBar的高度</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getActionBarHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    TypedValue tv = <span class=\"keyword\">new</span> TypedValue();</div><div class=\"line\">    <span class=\"keyword\">int</span> actionBarHeight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (context.getTheme().resolveAttribute(android.R.attr.actionBarSize, tv, <span class=\"keyword\">true</span>))<span class=\"comment\">// 如果资源是存在的、有效的</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        actionBarHeight = TypedValue.complexToDimensionPixelSize(tv.data, context.getResources().getDisplayMetrics());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> actionBarHeight;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取NavigationBar的高度</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context  context</div><div class=\"line\"> * <span class=\"doctag\">@return</span> NavigationBar的高度</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getNavigationBarHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    Resources resources = context.getResources();</div><div class=\"line\">    <span class=\"keyword\">int</span> resourceId = resources.getIdentifier(<span class=\"string\">\"navigation_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</div><div class=\"line\">    <span class=\"comment\">//获取NavigationBar的高度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> resources.<span class=\"title\">getDimensionPixelSize</span><span class=\"params\">(resourceId)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在我们回头想想，一张640 * 640的图片在不同dpi的屏幕上显示的大小可能是不一样的，例如在mdpi显示为 640/120 = 5.3inch,在hdpi的屏幕上显示为640/24=2.67inch。所以为了保证在各种不同dpi的屏幕上，同一张图片显示的大小尽可能相同，我们需要针对不同dpi的屏幕提供不同大小的图片。例如ic_launcher这张图片：在mdpi~xxxhdpi中大小依次为 36、48、72、96、144px。</p>\n<h2 id=\"限定符及其使用\"><a href=\"#限定符及其使用\" class=\"headerlink\" title=\"限定符及其使用\"></a>限定符及其使用</h2><h3 id=\"限定符的类型\"><a href=\"#限定符的类型\" class=\"headerlink\" title=\"限定符的类型\"></a>限定符的类型</h3><h4 id=\"1-large限定符\"><a href=\"#1-large限定符\" class=\"headerlink\" title=\"1. large限定符\"></a>1. large限定符</h4><p>现在很多应用在平板上都支持双面板模式，左边为选项列表，右侧为选项内容，但在手机上就无法容纳这种双面板模式，需要分别显示。在这种情况下我们就可以使用large限定符来动态选择布局。系统默认情况下，将7英寸及以上的手机及平板当做large来处理。</p>\n<blockquote>\n<p>res/<strong>layout</strong>/main.xml，单面板（默认）布局：</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">   \t<span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">   \t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">   \t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">fragment</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/headlines\"</span></div><div class=\"line\">             <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">             <span class=\"attr\">android:name</span>=<span class=\"string\">\"com.example.MenuFragment\"</span></div><div class=\"line\">             <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>res/<strong>layout-large</strong>/main.xml,双面板模式布局：</p>\n</blockquote>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;LinearLayout xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">   \tandroid:layout_width=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">   \tandroid:layout_height=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">   \tandroid:orientation=<span class=\"string\">\"horizontal\"</span>&gt;</div><div class=\"line\">   \t</div><div class=\"line\">   \t&lt;fragment android:<span class=\"built_in\">id</span>=<span class=\"string\">\"@+id/headlines\"</span></div><div class=\"line\">             android:layout_height=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">             android:<span class=\"built_in\">name</span>=<span class=\"string\">\"com.example.MenuFragment\"</span></div><div class=\"line\">             android:layout_width=<span class=\"string\">\"400dp\"</span></div><div class=\"line\">             android:layout_marginRight=<span class=\"string\">\"10dp\"</span>/&gt;</div><div class=\"line\">   \t&lt;fragment android:<span class=\"built_in\">id</span>=<span class=\"string\">\"@+id/article\"</span></div><div class=\"line\">             android:layout_height=<span class=\"string\">\"fill_parent\"</span></div><div class=\"line\">             android:<span class=\"built_in\">name</span>=<span class=\"string\">\"com.example.MenuDetailFragment\"</span></div><div class=\"line\">             android:layout_width=<span class=\"string\">\"fill_parent\"</span> /&gt;</div><div class=\"line\">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>\n<p>但是仅仅使用large限定符，是没有办法来做到精准的适配。例如因为某些特殊的需求需要在5寸，7寸，12寸等大小的手机上以不同的方式显示某些内容，此时large就无法满足需求了。最小宽度限定符就是用来解决解决上述问题的。</p>\n<h4 id=\"2-最先宽度限定符-swXXdp\"><a href=\"#2-最先宽度限定符-swXXdp\" class=\"headerlink\" title=\"2. 最先宽度限定符:swXXdp\"></a>2. 最先宽度限定符:swXXdp</h4><p>最小宽度限定度通过指定某个最小宽度来限定屏幕（以dp为单位）。比如标准7英寸的平板为600dp。</p>\n<p><strong>注意：swXXdp仅适用的android3.2及以上机型。</strong></p>\n<blockquote>\n<p>res/layout/main.xml</p>\n<p>res/layout-sw600dp/main.xml</p>\n<h4 id=\"3-布局别名\"><a href=\"#3-布局别名\" class=\"headerlink\" title=\"3. 布局别名\"></a>3. 布局别名</h4><p>最小宽度限定符仅适用于 Android 3.2 及更高版本。因此，如果我们仍需使用与较低版本兼容的概括尺寸范围（小、正常、大和特大）。例如，如果要将用户界面设计成在手机上显示单面板，但在 6 英寸平板电脑、电视和其他较大的设备上显示多面板，那么我们就需要提供以下文件：</p>\n<ul>\n<li>res/<strong>layout</strong>/main.xml: 单面板布局 //Normal</li>\n<li>res/<strong>layout-large</strong>/main.xml: 多面板布局   //适用于large，低于android3.2的情况</li>\n<li>res/<strong>layout-sw600dp</strong>/mail.xml: 多面板布局 //适用于android3.2且sw600dp情况</li>\n</ul>\n</blockquote>\n<p>后两个文件是相同的，因为其中sw600dp用于和 Android 3.2 设备匹配，而large则是为使用较低版本 Android 的平板电脑和电视准备的。</p>\n<p>要避免平板电脑和电视的文件出现重复，可以使用别名文件。例如，可以定义以下布局：</p>\n<blockquote>\n<ul>\n<li>res/layout/main.xml，单面板布局</li>\n<li>res/layout/main_twopanes.xml，双面板布局</li>\n</ul>\n</blockquote>\n<p>然后添加这两个文件：</p>\n<blockquote>\n<p>res/<strong>values-large</strong>/layout.xml:</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"layout\"</span>&gt;</span>@layout/main_twopanes<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>res/<strong>values-sw600dp</strong>/layout.xml:</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"layout\"</span>&gt;</span>@layout/main_twopanes<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-使用屏幕方向限定符\"><a href=\"#4-使用屏幕方向限定符\" class=\"headerlink\" title=\"4. 使用屏幕方向限定符\"></a>4. 使用屏幕方向限定符</h4><blockquote>\n<ul>\n<li>res/layout-land/mail.xml</li>\n<li>res/layout-port/main.xml</li>\n</ul>\n</blockquote>\n<h4 id=\"5-各式各样的限定度使用举例\"><a href=\"#5-各式各样的限定度使用举例\" class=\"headerlink\" title=\"5. 各式各样的限定度使用举例\"></a>5. 各式各样的限定度使用举例</h4><p>#####别名</p>\n<blockquote>\n<ul>\n<li>res/values-sw600dp-land/layout.xml</li>\n<li>res/values-large-land/layout.xml</li>\n<li>res/values-large-port/layout.xml</li>\n</ul>\n</blockquote>\n<h2 id=\"9Patch图片\"><a href=\"#9Patch图片\" class=\"headerlink\" title=\"9Patch图片\"></a>9Patch图片</h2><p>只需要记得左上限制缩放区域，右下限制显示区域</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cirynnjbg0001qo8fu28f81ph","category_id":"cirynnjdh0004qo8fcfaal0wt","_id":"cirynnjdv000aqo8fe4bhsmqz"},{"post_id":"cirynnje1000gqo8fk43gnz14","category_id":"cirynnje5000jqo8f4thnqlnz","_id":"cirynnjee000pqo8fxohd22qz"},{"post_id":"cirynnjel000vqo8fp9b787mr","category_id":"cirynnje5000jqo8f4thnqlnz","_id":"cirynnjeq000zqo8fxmdhv47t"},{"post_id":"cirynnjka0015qo8fset9fy8k","category_id":"cirynnje5000jqo8f4thnqlnz","_id":"cirynnjkh0019qo8fykcneqtr"},{"post_id":"cirynnjdi0005qo8f5piq5yvr","category_id":"cirynnje5000jqo8f4thnqlnz","_id":"cis04w7bf0001a48fpvj5dcas"},{"post_id":"cirynnjer0010qo8fr1fjjntj","category_id":"cirynnje5000jqo8f4thnqlnz","_id":"cis04w7gs0009a48fz3u7gbxn"}],"PostTag":[{"post_id":"cirynnjbg0001qo8fu28f81ph","tag_id":"cirynnjdc0003qo8frybl1gaa","_id":"cirynnjdx000cqo8ftrll956y"},{"post_id":"cirynnjbg0001qo8fu28f81ph","tag_id":"cirynnjdm0007qo8fjx44fbe3","_id":"cirynnjdz000eqo8flm1e3yui"},{"post_id":"cirynnje1000gqo8fk43gnz14","tag_id":"cirynnje5000iqo8f1bolj6fi","_id":"cirynnjei000rqo8fu0uyz4df"},{"post_id":"cirynnje1000gqo8fk43gnz14","tag_id":"cirynnjea000mqo8f8io4blsi","_id":"cirynnjek000tqo8foczrpesv"},{"post_id":"cirynnjel000vqo8fp9b787mr","tag_id":"cirynnje5000iqo8f1bolj6fi","_id":"cirynnjew0012qo8flhkv5et9"},{"post_id":"cirynnjel000vqo8fp9b787mr","tag_id":"cirynnjep000xqo8fish575fl","_id":"cirynnjew0013qo8fbxrrv0kg"},{"post_id":"cirynnjel000vqo8fp9b787mr","tag_id":"cirynnjev0011qo8f5nw0lg9l","_id":"cirynnjex0014qo8fosv0q0wk"},{"post_id":"cirynnjka0015qo8fset9fy8k","tag_id":"cirynnje5000iqo8f1bolj6fi","_id":"cirynnjkj001bqo8f8as1m1g6"},{"post_id":"cirynnjka0015qo8fset9fy8k","tag_id":"cirynnjkg0018qo8fs4xs1muu","_id":"cirynnjkj001cqo8fjhlnqdky"},{"post_id":"cirynnjka0015qo8fset9fy8k","tag_id":"cirynnjki001aqo8fxdb4kyog","_id":"cirynnjkj001dqo8fo0zcrv1x"},{"post_id":"cirynnjdi0005qo8f5piq5yvr","tag_id":"cirynnje5000iqo8f1bolj6fi","_id":"cis04w7bi0004a48fy5wlb41r"},{"post_id":"cirynnjdi0005qo8f5piq5yvr","tag_id":"cis04w7b10000a48fhcq04bdr","_id":"cis04w7bi0005a48fky8j0a84"},{"post_id":"cirynnjdi0005qo8f5piq5yvr","tag_id":"cis04w7bg0002a48fxt8nbcbj","_id":"cis04w7bi0006a48fe80g12gj"},{"post_id":"cirynnjdi0005qo8f5piq5yvr","tag_id":"cis04w7bh0003a48fkssk2smh","_id":"cis04w7bi0007a48fxmmobyyb"},{"post_id":"cirynnjer0010qo8fr1fjjntj","tag_id":"cis04w7gr0008a48ff22s8t7s","_id":"cis04w7gx000ca48fzjfe8odq"},{"post_id":"cirynnjer0010qo8fr1fjjntj","tag_id":"cis04w7gt000aa48fgrwnm6la","_id":"cis04w7gy000da48f04f5f0ns"},{"post_id":"cirynnjer0010qo8fr1fjjntj","tag_id":"cis04w7gv000ba48f4wmp8ade","_id":"cis04w7gy000ea48fo680lce4"}],"Tag":[{"name":"Java","_id":"cirynnjdc0003qo8frybl1gaa"},{"name":"四种引用","_id":"cirynnjdm0007qo8fjx44fbe3"},{"name":"android","_id":"cirynnje5000iqo8f1bolj6fi"},{"name":"multidex","_id":"cirynnjea000mqo8f8io4blsi"},{"name":"View绘制原理分析","_id":"cirynnjep000xqo8fish575fl"},{"name":"自定义View","_id":"cirynnjev0011qo8f5nw0lg9l"},{"name":"屏幕适配","_id":"cirynnjkg0018qo8fs4xs1muu"},{"name":"限定符","_id":"cirynnjki001aqo8fxdb4kyog"},{"name":"Activity","_id":"cis04w7b10000a48fhcq04bdr"},{"name":"Fragment","_id":"cis04w7bg0002a48fxt8nbcbj"},{"name":"ActivityThread","_id":"cis04w7bh0003a48fkssk2smh"},{"name":"Android","_id":"cis04w7gr0008a48ff22s8t7s"},{"name":"序列化与反序列化","_id":"cis04w7gt000aa48fgrwnm6la"},{"name":"单例模式","_id":"cis04w7gv000ba48f4wmp8ade"}]}}